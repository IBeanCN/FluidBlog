<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>野生Java程序员兼美食博主</title>
    <link>https://blog.ibean.eu.org/</link>
    
    <atom:link href="https://blog.ibean.eu.org/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>野生Java程序员兼美食博主</description>
    <pubDate>Fri, 26 Jan 2024 08:29:33 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>MongoDB初见-基础使用</title>
      <link>https://blog.ibean.eu.org/posts/cc3e20e9.html</link>
      <guid>https://blog.ibean.eu.org/posts/cc3e20e9.html</guid>
      <pubDate>Mon, 01 Mar 2021 03:20:42 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;原生语法使用&quot;&gt;&lt;a href=&quot;#原生语法使用&quot; class=&quot;headerlink&quot; title=&quot;原生语法使用&quot;&gt;&lt;/a&gt;原生语法使用&lt;/h1&gt;&lt;h2 id=&quot;添加&quot;&gt;&lt;a href=&quot;#添加&quot; class=&quot;headerlink&quot; title=&quot;添加&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="原生语法使用"><a href="#原生语法使用" class="headerlink" title="原生语法使用"></a>原生语法使用</h1><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><ul><li><p>使用 insert() 或 save() 方法向集合中插入文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.表名.insert(document);</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.hello.insert(<span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span>);</span><br><span class="line">db.hello.save(<span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">&#125;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定id更新对应id的数据</span></span><br><span class="line">db.hello.save(<span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;6&quot;</span><span class="punctuation">,</span><span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">&#125;</span>);</span><br><span class="line">db.hello.find(<span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;6&quot;</span><span class="punctuation">&#125;</span>);</span><br></pre></td></tr></table></figure><p><img src="/../img/image-20210301170747281.png" alt="image-20210301170747281"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.hello.save(<span class="punctuation">&#123;</span>&#x27;_id&#x27;<span class="punctuation">:</span>ObjectId(<span class="string">&quot;603caed56a230000ef001b3e&quot;</span>)<span class="punctuation">,</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;6&quot;</span><span class="punctuation">,</span><span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure><p><img src="/../img/image-20210301170846969.png" alt="image-20210301170846969"></p></li><li><p>如果使用save()，不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据；</p></li></ul><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><ul><li><p>使用insert()或save()方法来更新集合中的文档。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.col.update(    </span><br><span class="line">&lt;query&gt;<span class="punctuation">,</span> <span class="comment">// update的查询条件</span></span><br><span class="line">&lt;update&gt;<span class="punctuation">,</span> <span class="comment">// sql update查询内set后面的</span></span><br><span class="line"><span class="punctuation">&#123;</span>       </span><br><span class="line">upsert<span class="punctuation">:</span> &lt;boolean&gt;<span class="punctuation">,</span>   <span class="comment">//  可选，默认false，如果为true，当update数据不存在时则插入新数据</span></span><br><span class="line">multi<span class="punctuation">:</span> &lt;boolean&gt;  <span class="comment">// 可选，默认false，只更新条件找到的第一条记录，如果未true，更新所有</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.hello.update(<span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> &#x27;<span class="number">6</span>&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    $set<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    upsert<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    multi<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span>);</span><br></pre></td></tr></table></figure><p>  <img src="/../img/image-20210301171234675.png" alt="image-20210301171234675"></p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 9不存在 执行后插入一条新纪录</span></span><br><span class="line">db.hello.update(<span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> &#x27;<span class="number">9</span>&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    $set<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    upsert<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    multi<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span>);</span><br></pre></td></tr></table></figure><p>  <img src="/../img/image-20210301171523905.png" alt="image-20210301171523905"></p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 7存在多条 likes会批量更新成14</span></span><br><span class="line">db.hello.update(<span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> &#x27;<span class="number">7</span>&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    $set<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span> <span class="number">14</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    upsert<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    multi<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span>);</span><br></pre></td></tr></table></figure><p>  <img src="/../img/image-20210301171655808.png" alt="image-20210301171655808"></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.collection.remove(     </span><br><span class="line">  &lt;query&gt;<span class="punctuation">,</span>     </span><br><span class="line">  <span class="punctuation">&#123;</span>       </span><br><span class="line">  justOne<span class="punctuation">:</span> &lt;boolean&gt; <span class="comment">// 默认false删除所有，true只删除一条</span></span><br><span class="line">  <span class="punctuation">&#125;</span> </span><br><span class="line">  )</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只删除一条 </span></span><br><span class="line">db.hello.remove(</span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        justOne<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 删除所有</span></span><br><span class="line"> db.hello.remove(</span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        justOne<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="/../img/image-20210301172018087.png" alt="image-20210301172018087"><img src="/../img/image-20210301172046889.png" alt="image-20210301172046889"></p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(</span><br><span class="line">    &lt;query&gt;<span class="punctuation">,</span>  <span class="comment">// 可选，使用查询操作符指定查询条件</span></span><br><span class="line">    &lt;projection&gt; <span class="comment">// 可选，使用投影操作符指定返回的键</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// projection:key:1/0,当key为1时显示该字段否则隐藏</span></span><br><span class="line">db.hello.find(<span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><table><thead><tr><th>操作</th><th>格式</th><th>eg.</th><th>sql</th></tr></thead><tbody><tr><td>等于</td><td><code>&#123;&lt;key&gt;:&lt;value&gt;</code>}</td><td><code>db.hello.find(&#123;&quot;title&quot;:&quot;MongoDB&quot;&#125;).pretty()</code></td><td><code>where title = &#39;MongoDB&#39;</code></td></tr><tr><td>小于</td><td><code>&#123;&lt;key&gt;:&#123;$lt:&lt;value&gt;&#125;&#125;</code></td><td><code>db.hello.find(&#123;&quot;likes&quot;:&#123;$lt:50&#125;&#125;).pretty()</code></td><td><code>where likes &lt; 50</code></td></tr><tr><td>小于或等于</td><td><code>&#123;&lt;key&gt;:&#123;$lte:&lt;value&gt;&#125;&#125;</code></td><td><code>db.hello.find(&#123;&quot;likes&quot;:&#123;$lte:50&#125;&#125;).pretty()</code></td><td><code>where likes &lt;= 50</code></td></tr><tr><td>大于</td><td><code>&#123;&lt;key&gt;:&#123;$gt:&lt;value&gt;&#125;&#125;</code></td><td><code>db.hello.find(&#123;&quot;likes&quot;:&#123;$gt:50&#125;&#125;).pretty()</code></td><td><code>where likes &gt; 50</code></td></tr><tr><td>大于或等于</td><td><code>&#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;&#125;&#125;</code></td><td><code>db.hello.find(&#123;&quot;likes&quot;:&#123;$gte:50&#125;&#125;).pretty()</code></td><td><code>where likes &gt;= 50</code></td></tr><tr><td>不等于</td><td><code>&#123;&lt;key&gt;:&#123;$ne:&lt;value&gt;&#125;&#125;</code></td><td><code>db.hello.find(&#123;&quot;likes&quot;:&#123;$ne:50&#125;&#125;).pretty()</code></td><td><code>where likes != 50</code></td></tr></tbody></table><h3 id="AND和Or"><a href="#AND和Or" class="headerlink" title="AND和Or"></a>AND和Or</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// And操作</span></span><br><span class="line">db.col.find(<span class="punctuation">&#123;</span>key1<span class="punctuation">:</span>value1<span class="punctuation">,</span> key2<span class="punctuation">:</span>value2<span class="punctuation">&#125;</span>); <span class="comment">// 方法可以传入多个键(key)，每个键(key)以逗号隔开</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Or操作</span></span><br><span class="line">db.col.find(</span><br><span class="line">   <span class="punctuation">&#123;</span></span><br><span class="line">      $or<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="punctuation">&#123;</span>key1<span class="punctuation">:</span> value1<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span>key2<span class="punctuation">:</span>value2<span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.hello.find(<span class="punctuation">&#123;</span></span><br><span class="line">    $or<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> $gt<span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> $lte<span class="punctuation">:</span> <span class="number">2</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure><p><img src="/../img/image-20210301174907166.png" alt="image-20210301174907166"></p><h3 id="Limit和Skip的分页"><a href="#Limit和Skip的分页" class="headerlink" title="Limit和Skip的分页"></a>Limit和Skip的分页</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.col.find().limit(NUMBER).skip(NUMBER); <span class="comment">// skip的默认方法为0</span></span><br><span class="line"></span><br><span class="line">db.hello.find().limit(<span class="number">2</span>).skip(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="/../img/image-20210301175039354.png" alt="image-20210301175039354"></p><h3 id="Sort排序"><a href="#Sort排序" class="headerlink" title="Sort排序"></a>Sort排序</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.col.find().sort(<span class="punctuation">&#123;</span>KEY<span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span>) <span class="comment">// Key为需要排序的字段，1正序，-1倒叙</span></span><br><span class="line">db.hello.find().sort(<span class="punctuation">&#123;</span><span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span>);</span><br></pre></td></tr></table></figure><p><img src="/../img/image-20210301175145112.png" alt="image-20210301175145112"></p><ul><li>当limit，skip，sort同时使用，执行顺序是sort&gt;skip&gt;limit</li></ul><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.collection.createIndex(</span><br><span class="line">    &lt;keys&gt;<span class="punctuation">,</span> <span class="comment">// 创建索引的字段，&#123;key1,key2&#125;复合索引</span></span><br><span class="line">&lt;options&gt;<span class="comment">// 1正序，-1倒序</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>值</th><th>解释</th></tr></thead><tbody><tr><td>background</td><td>true&#x2F;false</td><td>默认false，当为true后台执行</td></tr><tr><td>unique</td><td>true&#x2F;false</td><td>默认false，当为true指定唯一索引</td></tr><tr><td>name</td><td>string</td><td>索引自定义名字，未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td></tr></tbody></table><h1 id="Java应用"><a href="#Java应用" class="headerlink" title="Java应用"></a>Java应用</h1><ul><li><p>添加数据源依赖</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://xxxxxx</span></span><br><span class="line">      <span class="attr">database:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure></li><li><p>更改实体bean 添加<code>@Document(&quot;集合名&quot;)</code>注解，方便后续使用</p></li><li><p>引入<code>MongoTemplate</code></p></li></ul><h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h2><ul><li><p>构建查询条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>();</span><br></pre></td></tr></table></figure></li><li><p>查询的两个常用<code>with()</code>方法</p><ul><li><p>分页</p><p><img src="/../img/image-20210301140409572.png" alt="image-20210301140409572"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 只分页</span></span><br><span class="line">query.with(PageRequest.of(pageNumber, pageSize));</span><br><span class="line"><span class="comment">// 2. 分页+排序</span></span><br><span class="line">query.with(PageRequest.of(pageNumber, pageSize, Sort.by(Sort.Direction.DESC, <span class="string">&quot;排序字段&quot;</span>)));</span><br></pre></td></tr></table></figure></li><li><p>排序</p><p><img src="/../img/image-20210301140426071.png" alt="image-20210301140426071"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sort.Direction 区分正序还是倒序</span></span><br><span class="line">query.with(Sort.by(Sort.Direction.DESC, <span class="string">&quot;排序字段&quot;</span>));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加查询条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="comment">// 2. add</span></span><br><span class="line">query.addCriteria(Criteria.where(<span class="string">&quot;&quot;</span>));</span><br></pre></td></tr></table></figure><table><thead><tr><th>Java</th><th>Sql</th></tr></thead><tbody><tr><td>Criteria.where(“id”).is(id);</td><td>id &#x3D; id</td></tr><tr><td>Pattern.compile(“^.<em>“ + text + “.</em>$”, Pattern.CASE_INSENSITIVE);<br />Criteria.where(“id”).regex(pattern);</td><td>id like ‘%text%’</td></tr><tr><td>Criteria.and(“createAt”).gte(startTime).lte(endTime);</td><td>createAt &gt;&#x3D; startTime and createAt &lt;&#x3D; endTime</td></tr></tbody></table></li></ul><p>| Criteria.and(“status”).nin(“SUCCESS”, “FAILURE”);<br />Criteria.and(“status”).in(“SUCCESS”); | status not in (“SUCCESS”, “FAILURE”)<br />status in (“SUCCESS”) |<br>  | Criteria.orOperator(Criteria.where(“orderId”).is(1), Criteria.where(“externalOrderId”).is(2)); | and (orderId &#x3D; 1 or externalOrderId &#x3D; 2)                     |</p><ul><li><p>执行查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoTemplate.find(query, xxx.class);</span><br></pre></td></tr></table></figure></li></ul><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><ul><li><p>分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;AggregationOperation&gt; operations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">operations.add(Aggregation.skip((Math.max(pageNo, <span class="number">1</span>) - <span class="number">1</span>) * pageSize));</span><br><span class="line">operations.add(Aggregation.limit(pageSize));</span><br><span class="line"><span class="comment">// 执行查询获取结果</span></span><br><span class="line">mongoTemplate.aggregate(Aggregation.newAggregation(inClazz, operations), outClazz).getMappedResults();</span><br></pre></td></tr></table></figure></li><li><p>为聚合查询添加查询条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过Aggregation.match添加查询条件，因为是作为operations，所以可以传入多个 执行的时候</span></span><br><span class="line">List&lt;AggregationOperation&gt; operations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">operations.add(Aggregation.match(andCriteria));</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 执行后的结果如下图</span></span><br></pre></td></tr></table></figure><p><img src="/../img/image-20210301160850024.png" alt="image-20210301160850024"></p></li><li><p>映射字段，当操作聚合数据的时候，如果涉及到分组求和等操作，这个操作必须进行字段映射，类似于sql的select a,b,c</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Aggregation.project(<span class="string">&quot;字段名&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>project的函数表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个的操作结果相当于 ifnull() 函数</span></span><br><span class="line">project.and(<span class="string">&quot;rechargeValue&quot;</span>).applyCondition(ConditionalOperators.IfNull.ifNull(<span class="string">&quot;rechargeValue&quot;</span>).thenValueOf(<span class="string">&quot;product.rechargeValue&quot;</span>)));</span><br><span class="line"><span class="comment">// 相当于 (serPrice - costPrice) as subUserCostPrice</span></span><br><span class="line">project.and(<span class="string">&quot;userPrice&quot;</span>).minus(<span class="string">&quot;costPrice&quot;</span>).as(<span class="string">&quot;subUserCostPrice&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>Group分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据字段分组</span></span><br><span class="line"><span class="type">GroupOperation</span> <span class="variable">group</span> <span class="operator">=</span> Aggregation.group(数组);</span><br><span class="line"><span class="comment">// 求和 a as sumCount</span></span><br><span class="line">group.count().as(<span class="string">&quot;sumCount&quot;</span>);</span><br><span class="line"><span class="comment">// 判断求和 case when then else end</span></span><br><span class="line">group.sum(ConditionalOperators.when(Criteria.where(<span class="string">&quot;aa&quot;</span>).is(RechargeOrderStatusEnum.FAILURE))</span><br><span class="line">                .then(<span class="number">1</span>).otherwise(<span class="number">0</span>)).as(<span class="string">&quot;bb&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只更新匹配的第一条数据</span></span><br><span class="line"><span class="type">UpdateResult</span> <span class="variable">updateResult</span> <span class="operator">=</span> mongoTemplate.updateFirst(查询条件, 更新数据, 集合);</span><br><span class="line"><span class="comment">// 更新所有匹配的数据</span></span><br><span class="line"><span class="type">UpdateResult</span> <span class="variable">updateResult</span> <span class="operator">=</span> mongoTemplate.updateMulti(查询条件, 更新数据, 集合);</span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="type">Update</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Update</span>();</span><br><span class="line"><span class="comment">// 放入更新的值 相当于 update xxx set a=xxx,b=xxx .... </span></span><br><span class="line"><span class="comment">// values是一个map集合</span></span><br><span class="line">values.forEach(update::set);</span><br></pre></td></tr></table></figure><h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.result.UpdateResult;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.BulkOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.aggregation.Aggregation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.aggregation.AggregationOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.aggregation.TypedAggregation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> vip.xxx.common.exceptions.ErrorCodeException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mongo常用操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ibean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/01/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MongoDbUtils</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存对象List到指定集合中</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 也可以在实体类上使用<span class="doctag">@Document</span>(collection=“集合名称”)指定集合名称，未指定则默认实体类的类名为集合名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entities 保存数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">saveAll</span><span class="params">(List&lt;T&gt; entities, Class&lt;T&gt; collection)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (entities.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BulkOperations</span> <span class="variable">ops</span> <span class="operator">=</span> mongoTemplate.bulkOps(BulkOperations.BulkMode.UNORDERED, collection);</span><br><span class="line">        ops.insert(entities).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id倒序查询最后一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity    数据实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> direction 倒序/正序 Direction.DESC/ASC</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">findOneSortById</span><span class="params">(Class&lt;T&gt; entity, Sort.Direction direction)</span> &#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>().with(Sort.by(direction, <span class="string">&quot;id&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.findOne(query, entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定key value到指定集合中查询匹配得数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 集合名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">count</span><span class="params">(Class&lt;T&gt; clazz, String key, String value)</span> &#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(key).is(value));</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.count(query, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定集合 根据条件查询出符合的第一条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 数据对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map    条件map  Map&lt;条件key,条件value&gt; map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sorts  排序规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">findSortFirst</span><span class="params">(Class&lt;T&gt; entity, Map&lt;String, Object&gt; map, List&lt;Sort&gt; sorts)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(<span class="literal">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ErrorCodeException</span>(<span class="string">&quot;查询条件Key不能为Null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> getCriteria(map);</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(criteria);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(sorts) &amp;&amp; !sorts.isEmpty()) &#123;</span><br><span class="line">            sorts.forEach(query::with);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.findOne(query, entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定集合 修改数据，且修改所找到的所有数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> criteria    查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values      修改内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz       集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateFirst true修改第一条数据  false修改所有匹配得数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; UpdateResult <span class="title function_">updateMulti</span><span class="params">(Criteria criteria, Map&lt;String, Object&gt; values, Class&lt;T&gt; clazz, <span class="type">boolean</span> updateFirst)</span> &#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(criteria);</span><br><span class="line">        <span class="type">Update</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Update</span>();</span><br><span class="line">        values.forEach(update::set);</span><br><span class="line">        UpdateResult updateResult;</span><br><span class="line">        <span class="keyword">if</span> (updateFirst) &#123;</span><br><span class="line">            updateResult = mongoTemplate.updateFirst(query, update, clazz);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            updateResult = mongoTemplate.updateMulti(query, update, clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> updateResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对数据做聚合处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inClazz  数据实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outClazz 结果集类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt; List&lt;R&gt; <span class="title function_">aggregation</span><span class="params">(Class&lt;T&gt; inClazz, Class&lt;R&gt; outClazz, List&lt;AggregationOperation&gt; operations)</span> &#123;</span><br><span class="line">        <span class="type">Aggregation</span> <span class="variable">aggregation</span> <span class="operator">=</span> Aggregation.newAggregation(operations);</span><br><span class="line">        <span class="keyword">return</span> Optional.of(mongoTemplate.aggregate(aggregation, inClazz, outClazz).getMappedResults()).orElse(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity   数据实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> criteria 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sorts    排序规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNo   当前页 入参从1开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 当前页数据条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; MongoPage&lt;T&gt; <span class="title function_">page</span><span class="params">(Class&lt;T&gt; entity, List&lt;Criteria&gt; criteria, List&lt;Sort&gt; sorts, <span class="type">int</span> pageNo, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>();</span><br><span class="line">        criteria.forEach(query::addCriteria);</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> mongoTemplate.count(query, entity);</span><br><span class="line">        <span class="type">int</span> <span class="variable">pages</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) count / (<span class="type">double</span>) pageSize);</span><br><span class="line">        pageNo = Math.max(pageNo, <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">        query.with(PageRequest.of(pageNo, pageSize));</span><br><span class="line">        <span class="comment">// 放入排序</span></span><br><span class="line">        Optional.ofNullable(sorts).ifPresent(item -&gt; sorts.forEach(query::with));</span><br><span class="line">        <span class="comment">// 查询数据</span></span><br><span class="line">        List&lt;T&gt; list = mongoTemplate.find(query, entity);</span><br><span class="line">        MongoPage&lt;T&gt; page = <span class="keyword">new</span> <span class="title class_">MongoPage</span>&lt;&gt;();</span><br><span class="line">        page.setPageNumber(pageNo);</span><br><span class="line">        page.setPageSize(pageSize);</span><br><span class="line">        page.setTotal(count);</span><br><span class="line">        page.setPages(pages);</span><br><span class="line">        page.setList(list);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聚合分页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operations 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sorts      排序规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNo     当前页 入参从1开始 不传不分页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize   当前页数据条数 不传不分页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt; MongoPage&lt;R&gt; <span class="title function_">aggregationPage</span><span class="params">(List&lt;AggregationOperation&gt; operations, List&lt;Sort&gt; sorts, Long pageNo, Integer pageSize, Class&lt;T&gt; inClazz, Class&lt;R&gt; outClazz)</span> &#123;</span><br><span class="line">        <span class="comment">// 查询总数量</span></span><br><span class="line">        List&lt;AggregationOperation&gt; countList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(operations);</span><br><span class="line">        countList.add(Aggregation.count().as(<span class="string">&quot;count&quot;</span>));</span><br><span class="line">        <span class="comment">// 查询满足条件的总数量</span></span><br><span class="line">        TypedAggregation&lt;T&gt; aggregation = Aggregation.newAggregation(inClazz, countList);</span><br><span class="line">        <span class="comment">// 总数量</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">countRaw</span> <span class="operator">=</span> mongoTemplate.aggregate(aggregation, outClazz).getUniqueMappedResult();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(countRaw)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// count public字段 获取聚合后总数据量</span></span><br><span class="line">                count = (Long) countRaw.getClass().getDeclaredField(<span class="string">&quot;count&quot;</span>).get(countRaw);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                count = <span class="number">0L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        MongoPage&lt;R&gt; page = <span class="keyword">new</span> <span class="title class_">MongoPage</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 查询分页后的具体数据</span></span><br><span class="line">        List&lt;R&gt; content = Collections.emptyList();</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sorts.forEach(item -&gt; operations.add(Aggregation.sort(item)));</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(pageNo) &amp;&amp; Objects.nonNull(pageSize)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">pages</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) count / (<span class="type">double</span>) pageSize);</span><br><span class="line">                page.setPageNumber(pageNo.intValue());</span><br><span class="line">                page.setPageSize(pageSize);</span><br><span class="line">                page.setPages(pages);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 分页数据</span></span><br><span class="line">                operations.add(Aggregation.skip((Math.max(pageNo, <span class="number">1</span>) - <span class="number">1</span>) * pageSize));</span><br><span class="line">                operations.add(Aggregation.limit(pageSize));</span><br><span class="line">            &#125;</span><br><span class="line">            aggregation = Aggregation.newAggregation(inClazz, operations);</span><br><span class="line">            <span class="comment">// 查询数据</span></span><br><span class="line">            content = mongoTemplate.aggregate(aggregation, outClazz).getMappedResults();</span><br><span class="line">        &#125;</span><br><span class="line">        page.setTotal(count);</span><br><span class="line">        page.setList(content);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接查询条件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Criteria <span class="title function_">getCriteria</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Criteria</span>();</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> criteria;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                criteria = Criteria.where(key).is(map.get(key));</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                criteria.and(key).is(map.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> criteria;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回左右模糊的表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Pattern <span class="title function_">allLike</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Pattern.compile(<span class="string">&quot;^.*&quot;</span> + text + <span class="string">&quot;.*$&quot;</span>, Pattern.CASE_INSENSITIVE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取类的所有字段名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ignoredField 忽略的字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;   类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字段集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; String[] getClassProject(Class&lt;T&gt; clazz, List&lt;String&gt; ignoredField) &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(Lists.newArrayList(clazz.getDeclaredFields()), Lists.newArrayList(clazz.getSuperclass().getDeclaredFields()))</span><br><span class="line">                .flatMap(Collection::stream).filter(item -&gt; !ignoredField.contains(item.getName())).filter(Objects::nonNull).map(Field::getName)</span><br><span class="line">                .distinct().toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mongo分页</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ibean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/01/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MongoPage</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4580954926581934608L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageNumber;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pages;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/MongoDB/">MongoDB</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/MongoDB/">MongoDB</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/cc3e20e9.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MongoDB初见</title>
      <link>https://blog.ibean.eu.org/posts/372e50b0.html</link>
      <guid>https://blog.ibean.eu.org/posts/372e50b0.html</guid>
      <pubDate>Tue, 23 Feb 2021 00:24:10 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;下载-amp-安装&quot;&gt;&lt;a href=&quot;#下载-amp-安装&quot; class=&quot;headerlink&quot; title=&quot;下载&amp;amp;安装&quot;&gt;&lt;/a&gt;下载&amp;amp;安装&lt;/h1&gt;&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="下载-amp-安装"><a href="#下载-amp-安装" class="headerlink" title="下载&amp;安装"></a>下载&amp;安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="MongoDB官网下载页面"><a href="#MongoDB官网下载页面" class="headerlink" title="MongoDB官网下载页面"></a>MongoDB官网下载页面</h3><p><a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><h3 id="Windows-4-4-4下载链接"><a href="#Windows-4-4-4下载链接" class="headerlink" title="Windows 4.4.4下载链接"></a>Windows 4.4.4下载链接</h3><p><a href="https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-4.4.4-signed.msi">https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-4.4.4-signed.msi</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="/../img/image-20210223165011681.png" alt="image-20210223165011681"></p><p><img src="/../img/image-20210223165032278.png" alt="image-20210223165032278"></p><ul><li>这一步选custom只是为了下一步可以选择安装位置</li></ul><p><img src="/../img/image-20210223165103534.png" alt="image-20210223165103534"></p><p><img src="/../img/image-20210223165201144.png" alt="image-20210223165201144"></p><ul><li>把mongo安装成服务</li></ul><p><img src="/../img/image-20210223165250254.png" alt="image-20210223165250254"></p><ul><li><p>这一步会安装mongo自己的可视化工具，不是特别建议因为会很慢可以后期去官网下载</p><p><img src="/../img/image-20210223165505662.png" alt="image-20210223165505662"></p><p><img src="/../img/image-20210223165600390.png" alt="image-20210223165600390"></p><p>等待安装完成即可，Windows在这一步可能会有报错，至少我就没顺利过，具体问题参考踩坑填坑</p></li></ul><h2 id="踩坑填坑"><a href="#踩坑填坑" class="headerlink" title="踩坑填坑"></a>踩坑填坑</h2><h3 id="Service-MongoDB-Server-MongoDB-failed-to-start-Verify-that-you-have-sufficient-privileges-to-start-system-services"><a href="#Service-MongoDB-Server-MongoDB-failed-to-start-Verify-that-you-have-sufficient-privileges-to-start-system-services" class="headerlink" title="Service MongoDB Server MongoDB failed to start. Verify that you have sufficient privileges to start system services"></a>Service MongoDB Server MongoDB failed to start. Verify that you have sufficient privileges to start system services</h3><p><img src="/../img/image-20210223165727751.png" alt="image-20210223165727751"></p><p>当遇到这个问题，直接点ignore忽略就好，当然不是不解决这个问题，因为你的服务依旧没有正常启动</p><p><img src="/../img/image-20210223170244212.png" alt="image-20210223170244212"></p><p>手动启动会报错</p><p><img src="/../img/image-20210223170319470.png" alt="image-20210223170319470"></p><p>去安装目录的bin目录下执行 <code>mongod --install</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS D:\MongoDB\Server\4.4\bin&gt; mongod --install</span><br><span class="line">&#123;&quot;t&quot;:&#123;&quot;$date&quot;:&quot;2021-02-23T17:05:24.561+08:00&quot;&#125;,&quot;s&quot;:&quot;I&quot;,  &quot;c&quot;:&quot;CONTROL&quot;,  &quot;id&quot;:23285,   &quot;ctx&quot;:&quot;main&quot;,&quot;msg&quot;:&quot;Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols &#x27;none&#x27;&quot;&#125;</span><br><span class="line">&#123;&quot;t&quot;:&#123;&quot;$date&quot;:&quot;2021-02-23T17:05:24.565+08:00&quot;&#125;,&quot;s&quot;:&quot;W&quot;,  &quot;c&quot;:&quot;ASIO&quot;,     &quot;id&quot;:22601,   &quot;ctx&quot;:&quot;main&quot;,&quot;msg&quot;:&quot;No TransportLayer configured during NetworkInterface startup&quot;&#125;</span><br><span class="line">&#123;&quot;t&quot;:&#123;&quot;$date&quot;:&quot;2021-02-23T17:05:24.565+08:00&quot;&#125;,&quot;s&quot;:&quot;I&quot;,  &quot;c&quot;:&quot;NETWORK&quot;,  &quot;id&quot;:4648602, &quot;ctx&quot;:&quot;main&quot;,&quot;msg&quot;:&quot;Implicit TCP FastOpen in use.&quot;&#125;</span><br><span class="line">&#123;&quot;t&quot;:&#123;&quot;$date&quot;:&quot;2021-02-23T17:05:24.566+08:00&quot;&#125;,&quot;s&quot;:&quot;I&quot;,  &quot;c&quot;:&quot;CONTROL&quot;,  &quot;id&quot;:23288,   &quot;ctx&quot;:&quot;main&quot;,&quot;msg&quot;:&quot;--install has to be used with a log file for server output&quot;&#125;</span><br></pre></td></tr></table></figure><p>分析输出error 最终的关键信息是第三行的</p><p><code>No TransportLayer configured during NetworkInterface startup</code></p><p>通过这行报错找到了这个这个的解决方案</p><p><a href="https://stackoverflow.com/questions/61657136/what-is-meant-by-this-error-no-transportlayer-configured-during-networkinterfac">what is meant by this error “No TransportLayer configured during NetworkInterface startup” in mongodb?</a></p><p>解决方案是回到服务列表右键属性切换到登录标签，将登录身份更改为<code>本地系统账户</code>，确定后重启服务就可以正常启动了</p><p><img src="/../img/image-20210223171217974.png" alt="image-20210223171217974"></p><p>用户这里正常来说应该在安装的这一步可以选择第二项进行选择用户，但是会有问题，指定用户为Administrator后点击下一步安装程序就会直接结束 也是因为发生了异常</p><p><img src="/../img/image-20210223165250254.png" alt="image-20210223165250254"></p><h1 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h1><h2 id="MongoDB-Compass"><a href="#MongoDB-Compass" class="headerlink" title="MongoDB Compass"></a>MongoDB Compass</h2><p><img src="/../img/image-20210223174731738.png" alt="image-20210223174731738"></p><h2 id="Navicat-Premium"><a href="#Navicat-Premium" class="headerlink" title="Navicat Premium"></a>Navicat Premium</h2><p><img src="/../img/image-20210223174805746.png" alt="image-20210223174805746"></p><h2 id="DataGrip"><a href="#DataGrip" class="headerlink" title="DataGrip"></a>DataGrip</h2><p><img src="/../img/image-20210223174937225.png" alt="image-20210223174937225"></p><p>对于简单的查询和聚合用datagrip还比较好</p><p>因为查询支持select语句，同时会在输出力转化为对应的语法</p><p><img src="/../img/image-20210223175104350.png" alt="image-20210223175104350"></p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/MongoDB/">MongoDB</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/MongoDB/">MongoDB</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/372e50b0.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MongoDB自定义类型转换器</title>
      <link>https://blog.ibean.eu.org/posts/27176.html</link>
      <guid>https://blog.ibean.eu.org/posts/27176.html</guid>
      <pubDate>Sat, 06 Feb 2021 09:18:48 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;当在springboot中集成MongoDB的时候，通常使用mongoTemplate操作db，而在不做任何操作的情况下，Big</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><ol><li>当在springboot中集成MongoDB的时候，通常使用mongoTemplate操作db，而在不做任何操作的情况下，BigDecimal写入mongo会变成字符串的形式，这很显然不符合我们的预期，不管是在取值还是做排序。</li><li>另外一种情况就是存入时间的问题，因为mongo入库时间以UTC时间为标准，当将正常时间入库时因为东八区的问题会把时间减去8小时，导入入库时间不是我们想要看到的，当然这种方式可以通过手动转时间戳或者手动转换存取的时间格式。</li></ol><p>以上这两种情况无论如果是手动处理每个实体则会导致操作变复杂，加大工作量，代码冗余，如果漏掉某次转换则会导致数据出现问题。</p><p>所以针对这种情况就可以通过自定义转换器实现。</p><h1 id="自定义转换器"><a href="#自定义转换器" class="headerlink" title="自定义转换器"></a>自定义转换器</h1><p>期望达到效果</p><ul><li>时间和时间戳在写入和取出时可以自动转换</li><li>BigDecimal和Decimal在写入和取出时可以自动转换</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="mongo配置"><a href="#mongo配置" class="headerlink" title="mongo配置"></a>mongo配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MongoConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义转换器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.springframework.data.mongodb.core.convert.CustomConversions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MongoCustomConversions <span class="title function_">customConversions</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Converter&lt;?, ?&gt;&gt; converterList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        converterList.add(<span class="keyword">new</span> <span class="title class_">MgBigDecimalToDecimal128Converter</span>());</span><br><span class="line">        converterList.add(<span class="keyword">new</span> <span class="title class_">MgDecimal128ToBigDecimalConverter</span>());</span><br><span class="line">        converterList.add(<span class="keyword">new</span> <span class="title class_">MgLocalDateTimeToLongConverter</span>());</span><br><span class="line">        converterList.add(<span class="keyword">new</span> <span class="title class_">MgLongToLocalDateTimeConverter</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MongoCustomConversions</span>(converterList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mongo映射转换器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mongoDbFactory    mongo工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappingContext    映射命名空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customConversions 自定义转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.springframework.data.mongodb.core.convert.MappingMongoConverter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MappingMongoConverter <span class="title function_">mappingMongoConverter</span><span class="params">(MongoDbFactory mongoDbFactory, MongoMappingContext mappingContext, MongoCustomConversions customConversions)</span> &#123;</span><br><span class="line">        <span class="type">DbRefResolver</span> <span class="variable">dbRefResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultDbRefResolver</span>(mongoDbFactory);</span><br><span class="line">        <span class="type">MappingMongoConverter</span> <span class="variable">mappingConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingMongoConverter</span>(dbRefResolver, mappingContext);</span><br><span class="line">        <span class="comment">//添加自定义的转换器</span></span><br><span class="line">        mappingConverter.setCustomConversions(customConversions);</span><br><span class="line">        <span class="comment">//去掉入库时的_class</span></span><br><span class="line">        mappingConverter.setTypeMapper(<span class="keyword">new</span> <span class="title class_">DefaultMongoTypeMapper</span>(<span class="literal">null</span>));</span><br><span class="line">        <span class="keyword">return</span> mappingConverter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换器实现"><a href="#转换器实现" class="headerlink" title="转换器实现"></a>转换器实现</h3><h4 id="LocalDatetime转时间戳"><a href="#LocalDatetime转时间戳" class="headerlink" title="LocalDatetime转时间戳"></a>LocalDatetime转时间戳</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WritingConverter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MgLocalDateTimeToLongConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;LocalDateTime, Long&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">convert</span><span class="params">(LocalDateTime localDateTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> localDateTime.toEpochSecond(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间戳转LocalDateTime"><a href="#时间戳转LocalDateTime" class="headerlink" title="时间戳转LocalDateTime"></a>时间戳转LocalDateTime</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ReadingConverter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MgLongToLocalDateTimeConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Long, LocalDateTime&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">convert</span><span class="params">(Long timestamp)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.ofEpochSecond(timestamp, <span class="number">0</span>, ZoneOffset.of(<span class="string">&quot;+8&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BigDecimal转Decimal128"><a href="#BigDecimal转Decimal128" class="headerlink" title="BigDecimal转Decimal128"></a>BigDecimal转Decimal128</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WritingConverter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MgBigDecimalToDecimal128Converter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;BigDecimal, Decimal128&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Decimal128 <span class="title function_">convert</span><span class="params">(BigDecimal bigDecimal)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Decimal128</span>(bigDecimal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Decimal128转BigDecimal"><a href="#Decimal128转BigDecimal" class="headerlink" title="Decimal128转BigDecimal"></a>Decimal128转BigDecimal</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ReadingConverter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MgDecimal128ToBigDecimalConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Decimal128, BigDecimal&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BigDecimal <span class="title function_">convert</span><span class="params">(Decimal128 decimal128)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decimal128.bigDecimalValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><blockquote><p>再补充 下班了~~</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/MongoDB/">MongoDB</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/MongoDB/">MongoDB</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/27176.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terminal改造从Powershell开始</title>
      <link>https://blog.ibean.eu.org/posts/37627.html</link>
      <guid>https://blog.ibean.eu.org/posts/37627.html</guid>
      <pubDate>Sun, 23 Aug 2020 14:49:50 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Windows-Terminal&quot;&gt;&lt;a href=&quot;#Windows-Terminal&quot; class=&quot;headerlink&quot; title=&quot;Windows Terminal&quot;&gt;&lt;/a&gt;Windows Terminal&lt;/h2&gt;&lt;p&gt;从Win10的Store下载</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h2><p>从Win10的Store下载就好</p><h2 id="PowerShell安装"><a href="#PowerShell安装" class="headerlink" title="PowerShell安装"></a>PowerShell安装</h2><p><a href="https://github.com/PowerShell/PowerShell/releases">GitHub下载地址</a><br>往下找到这个 根据系统选64或者86的安装包下载就行<br><img src="/../img/image-e29384f49eda41708bbc768becea1655.png" alt="image.png"></p><h2 id="Windows-Terminal改造"><a href="#Windows-Terminal改造" class="headerlink" title="Windows Terminal改造"></a>Windows Terminal改造</h2><h3 id="更改默认的命令行"><a href="#更改默认的命令行" class="headerlink" title="更改默认的命令行"></a>更改默认的命令行</h3><p><img src="/../img/image-6cced7668e6843adaece180b6028d98f.png" alt="image.png"><br>选择设置，先找到下图安装的这个新的powershell，复制他的guid<br><img src="/../img/image-d6ba9d70d64a48e98fecbc5b809552f5.png" alt="image.png"><br>然后找到 <code>defaultProfile</code> ，将guid替换掉，重启Terminal</p><h3 id="插件和配色修改"><a href="#插件和配色修改" class="headerlink" title="插件和配色修改"></a>插件和配色修改</h3>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Terminal/">Terminal</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Terminal/">Terminal</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/37627.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docker Java 常用开发环境</title>
      <link>https://blog.ibean.eu.org/posts/9258.html</link>
      <guid>https://blog.ibean.eu.org/posts/9258.html</guid>
      <pubDate>Sat, 22 Aug 2020 08:30:44 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;最近重装了电脑。。但是又懒于安装开发环境。。于是想到了docker&lt;br&gt;这里仅仅便于我自己而已没有深入的内容&lt;br&gt;无奈不知道怎么可以在docker中安装jdk，外部环境可以使用，这样电脑里就少装两个软件随用随下可扩展，感觉还不错&lt;/p&gt;
&lt;p&gt;利用docker-comp</description>
        
      
      
      
      <content:encoded><![CDATA[<p>最近重装了电脑。。但是又懒于安装开发环境。。于是想到了docker<br>这里仅仅便于我自己而已没有深入的内容<br>无奈不知道怎么可以在docker中安装jdk，外部环境可以使用，这样电脑里就少装两个软件随用随下可扩展，感觉还不错</p><p>利用docker-compose进行管理<br>编写<code>docker-compose.yml</code>文件，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.0.6</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6378</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">你自己的本地路径/Redis/conf/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">你自己的本地路径/Redis/data:/data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/usr/local/etc/redis/redis.conf</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3307</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">你自己的本地路径/MySQL/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_general_ci</span></span><br><span class="line">      <span class="string">--explicit_defaults_for_timestamp=true</span></span><br><span class="line">      <span class="string">--lower_case_table_names=1</span></span><br><span class="line">      <span class="string">--max_allowed_packet=128M;</span></span><br></pre></td></tr></table></figure><p>以上你的镜像应该都装好了<br>利用<code>docker-compose up -d</code>运行，<code>docker-compose down</code>终止<br>运行结果</p><p><img src="/../img/image-d5130828748e47f2b6a5259c74bc830d.png" alt="image-d5130828748e47f2b6a5259c74bc830d"></p><p><img src="/../img/image-9e80206f6ea54d35b32d55e59e96b6bb.png" alt="image-9e80206f6ea54d35b32d55e59e96b6bb"></p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Docker/">Docker</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Docker/">Docker</category>
      
      <category domain="https://blog.ibean.eu.org/tags/Java/">Java</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/9258.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Redis通过ZSet实现限流</title>
      <link>https://blog.ibean.eu.org/posts/17641.html</link>
      <guid>https://blog.ibean.eu.org/posts/17641.html</guid>
      <pubDate>Tue, 11 Aug 2020 13:24:04 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;公司前段时间需要一个限流的功能，使用场景则是在一个滑动时间段内统计某一IP的访问数量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;第一次接触窗口的概念还是在学习大数据的时候，在实时处理的时候了解到的，自然而然就想到了窗口统计</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>公司前段时间需要一个限流的功能，使用场景则是在一个滑动时间段内统计某一IP的访问数量</p></blockquote><blockquote><p>第一次接触窗口的概念还是在学习大数据的时候，在实时处理的时候了解到的，自然而然就想到了窗口统计的操作，不过目前业务量可能还不至于吧，嗯对就是那样</p></blockquote><blockquote><p>无脑上呗，就利用Redis做了一个实现（不是原子性的）</p></blockquote><hr><p><strong>我太啰嗦了，网上百度一下Redis限流很多理论和操作实践就不罗嗦了，直接上自己魔改过的</strong></p><h2 id="基于Redis的ZSet实现的窗口限流操作"><a href="#基于Redis的ZSet实现的窗口限流操作" class="headerlink" title="基于Redis的ZSet实现的窗口限流操作"></a>基于Redis的ZSet实现的窗口限流操作</h2><p>忘记参考哪个贴了，如果有相似部分请补充一下原帖链接，代码各位取其精华去其糟粕，嗯~很可能都没了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 窗口限制</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key         限制key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> windowTimes 窗口内限制次数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> windowTime  窗口时间(ms)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> windowLimitTime 达到限制时，限制时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeUnit 时间类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> errorMsg 限制时提示的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowLimit</span><span class="params">(String key, <span class="type">int</span>[] windowTimes, <span class="type">long</span>[] windowTime, <span class="type">long</span>[] windowLimitTime, TimeUnit timeUnit, String errorMsg)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">String</span> <span class="variable">windowKey</span> <span class="operator">=</span> WINDOW + key;</span><br><span class="line">        <span class="keyword">if</span> (redisUtils.exists(WINDOW_LIMIT + key)) &#123;</span><br><span class="line">            String[] errors = splitError(errorMsg);</span><br><span class="line">    <span class="comment">// 这里要做分割是因为错误信息里有其他的数据，但是又不是全提示用户</span></span><br><span class="line">            log.warn(<span class="string">&quot;当前[&#123;&#125;]被[&#123;&#125;]限制,锁定时间[&#123;&#125;],错误信息:[&#123;&#125;]&quot;</span>, key, <span class="string">&quot;窗口锁&quot;</span>, redisUtils.getExpire(WINDOW_LIMIT + key), errors[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ErrorCodeException</span>(ErrorCodeEnum.ERROR, errors[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 按照窗口最大值，清除历史key</span></span><br><span class="line">        <span class="type">OptionalLong</span> <span class="variable">max</span> <span class="operator">=</span> Arrays.stream(windowTime).max();</span><br><span class="line">        <span class="keyword">if</span> (max.isPresent()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">maxWindow</span> <span class="operator">=</span> max.getAsLong();</span><br><span class="line">            <span class="type">long</span> <span class="variable">minScore</span> <span class="operator">=</span> currentTime - timeUnit.toMillis(maxWindow);</span><br><span class="line">            <span class="comment">// 删除最远时间之前的元素，精简大小</span></span><br><span class="line">            redisUtils.removeRangeByScore(windowKey, <span class="number">0</span>, minScore - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断窗口是否达到限制</span></span><br><span class="line">        <span class="comment">// 这段代码感觉可以优化 但是无解~</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; windowTime.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 窗口区间开始位置</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">rangeBegin</span> <span class="operator">=</span> currentTime - timeUnit.toMillis(windowTime[i]);</span><br><span class="line">            <span class="comment">// rangeBegin，currentTime是限流的时间</span></span><br><span class="line">            Set&lt;Object&gt; limits = redisUtils.rangeByScore(windowKey, rangeBegin, currentTime);</span><br><span class="line">            <span class="comment">// 判断是否达到窗口限制</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(limits)) &#123;</span><br><span class="line">                <span class="comment">// 时间内次数小于窗口限制次数不处理</span></span><br><span class="line">                <span class="keyword">if</span> (limits.size() &lt; windowTimes[i]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 放入redis限制key，代表下一次一定会被限制</span></span><br><span class="line">                redisUtils.set(WINDOW_LIMIT + key, errorMsg, windowLimitTime[i], timeUnit);</span><br><span class="line">                <span class="comment">// 如果时间内次数大于窗口限制次数，抛出异常</span></span><br><span class="line">                <span class="keyword">if</span> (limits.size() &gt; windowTimes[i]) &#123;</span><br><span class="line">                    String[] errors = splitError(errorMsg);</span><br><span class="line">                    log.warn(<span class="string">&quot;当前[&#123;&#125;]被[&#123;&#125;]限制,锁定时间[&#123;&#125;],错误信息:[&#123;&#125;]&quot;</span>, key, <span class="string">&quot;窗口锁&quot;</span>, redisUtils.getExpire(WINDOW_LIMIT + key), errors[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ErrorCodeException</span>(ErrorCodeEnum.ERROR, errors[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 时间戳作为zset的score 后续清数据取数据用</span></span><br><span class="line">        redisUtils.zSetAdd(windowKey, StringUtils.replaceAll(UUID.randomUUID().toString(), <span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>), currentTime);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码写的有点糙请谅解~</p><p>还是上面提到的小部分应用还是可以的，大规模的使用还是建议专业的事专业的人干比较好~</p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Redis/">Redis</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Redis/">Redis</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/17641.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用LocalDateTime导致入库时时间被舍入</title>
      <link>https://blog.ibean.eu.org/posts/58853.html</link>
      <guid>https://blog.ibean.eu.org/posts/58853.html</guid>
      <pubDate>Sat, 18 Jul 2020 13:24:14 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前置条件&quot;&gt;&lt;a href=&quot;#前置条件&quot; class=&quot;headerlink&quot; title=&quot;前置条件&quot;&gt;&lt;/a&gt;前置条件&lt;/h2&gt;&lt;p&gt;MySql，jdk1.8，LocalDateTime&lt;/p&gt;
&lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; c</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>MySql，jdk1.8，LocalDateTime</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>需要获取到指定时间在当天的23.59.59</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一次使用的时候</span><br><span class="line">LocalDateTime.of(LocalDate.now(), LocalTime.MAX)</span><br><span class="line">得到的结果是</span><br><span class="line"><span class="number">2020</span>-<span class="number">07</span>-18T23:<span class="number">59</span>:<span class="number">59.999999999</span></span><br></pre></td></tr></table></figure><p>数据库时间字段为<code>datetime</code>类型，当把这个值入库时，库里会变成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">07</span>-<span class="number">19</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> 会发现后面的<span class="number">999999</span>被进位了，但是这不是我们实际业务需要的值</span><br></pre></td></tr></table></figure><h2 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h2><p>两种方式可以解决</p><ol><li>通过 LocalTime.of(23, 59, 59)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime.of(LocalDate.now(), LocalTime.of(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>))</span><br><span class="line">得到的结果</span><br><span class="line"><span class="number">2020</span>-<span class="number">07</span>-18T23:<span class="number">59</span>:<span class="number">59</span></span><br></pre></td></tr></table></figure></li><li>通过 LocalDateTime下的truncatedTo阶段返回一个时间对象的副本<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime.of(LocalDate.now(), LocalTime.MAX).truncatedTo(SECONDS)</span><br><span class="line">得到的结果</span><br><span class="line"><span class="number">2020</span>-<span class="number">07</span>-18T23:<span class="number">59</span>:<span class="number">59</span></span><br></pre></td></tr></table></figure>这种方式按照文档的解释，是将truncatedTo的参数认为我需要截断的位置，然后将该位置之后的值变为0<br>详细的解释找找对应方法的使用和官方文档吧~~~~<br>改用这种方法后，数据库存入的值也正常了~~~<br>随便写写<del>完结</del></li></ol>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/MySQL/">MySQL</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Java/">Java</category>
      
      <category domain="https://blog.ibean.eu.org/tags/LocalDateTime/">LocalDateTime</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/58853.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>消除try_catch</title>
      <link>https://blog.ibean.eu.org/posts/63932.html</link>
      <guid>https://blog.ibean.eu.org/posts/63932.html</guid>
      <pubDate>Wed, 01 Jul 2020 08:25:06 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5ed7a03f518825433c13ae47?utm_source=gold_browser_extension#heading-18&quot;&gt;https://juejin.im/post/5ed7a03f518</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://juejin.im/post/5ed7a03f518825433c13ae47?utm_source=gold_browser_extension#heading-18">https://juejin.im/post/5ed7a03f518825433c13ae47?utm_source=gold_browser_extension#heading-18</a></p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Java/">Java</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Java/">Java</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/63932.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于升级jasypt引发的SpringBoot无法启动</title>
      <link>https://blog.ibean.eu.org/posts/22792.html</link>
      <guid>https://blog.ibean.eu.org/posts/22792.html</guid>
      <pubDate>Sat, 13 Jun 2020 13:24:28 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;问题概述&quot;&gt;&lt;a href=&quot;#问题概述&quot; class=&quot;headerlink&quot; title=&quot;问题概述&quot;&gt;&lt;/a&gt;问题概述&lt;/h2&gt;&lt;p&gt;最近升级了一次密码加密的插件从2.x-&amp;gt;3.x的升级，启动项目时SpringBoot报错如下&lt;/p&gt;
&lt;figure </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h2><p>最近升级了一次密码加密的插件从2.x-&gt;3.x的升级，启动项目时SpringBoot报错如下</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Failed to bind properties under &#x27;spring.datasource.password&#x27; to java.lang.String:</span><br><span class="line"></span><br><span class="line">    Reason: Failed to bind properties under &#x27;spring.datasource.password&#x27; to java.lang.String</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Update your application&#x27;s configuration</span><br></pre></td></tr></table></figure><p>原Pom版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>升级后pom</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>接下来网上寻找解决方案，从官方git发现issue<br><a href="https://github.com/ulisesbocchio/jasypt-spring-boot/issues/154#issuecomment-569802122">Failed to bind properties under ‘spring.datasource.password’ to java.lang.String</a> 在此comment处发现解决方案</p><p>原yml配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>更改为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">algorithm:</span> <span class="string">PBEWithMD5AndDES</span></span><br><span class="line">    <span class="attr">iv-generator-classname:</span> <span class="string">org.jasypt.iv.NoIvGenerator</span></span><br></pre></td></tr></table></figure><p>重启项目，项目正常启动。如果还有别的方法可以解决可以留言哦</p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/SpringBoot/">SpringBoot</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/SpringBoot/">SpringBoot</category>
      
      <category domain="https://blog.ibean.eu.org/tags/jasypt/">jasypt</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/22792.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于aop切不到方法里的方法</title>
      <link>https://blog.ibean.eu.org/posts/28153.html</link>
      <guid>https://blog.ibean.eu.org/posts/28153.html</guid>
      <pubDate>Fri, 20 Mar 2020 12:09:31 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/java_OnTheWay_kouhao/article/details/88964857&quot;&gt;https://blog.csdn.net/java_OnTheWay_kouhao/article/details/</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://blog.csdn.net/java_OnTheWay_kouhao/article/details/88964857">https://blog.csdn.net/java_OnTheWay_kouhao/article/details/88964857</a></p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/SpringBoot/">SpringBoot</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Spring/">Spring</category>
      
      <category domain="https://blog.ibean.eu.org/tags/Aop/">Aop</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/28153.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Centos7安装Docker</title>
      <link>https://blog.ibean.eu.org/posts/62563.html</link>
      <guid>https://blog.ibean.eu.org/posts/62563.html</guid>
      <pubDate>Wed, 04 Mar 2020 08:58:35 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;该部分完全参考官网文档，并简化，详细参考&lt;/strong&gt; &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/centos/&quot;&gt;官网文档（https://docs.docker.com/inst</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>该部分完全参考官网文档，并简化，详细参考</strong> <a href="https://docs.docker.com/install/linux/docker-ce/centos/">官网文档（https://docs.docker.com/install/linux/docker-ce/centos/）</a></p><h3 id="1-系统环境"><a href="#1-系统环境" class="headerlink" title="1. 系统环境"></a>1. 系统环境</h3><ul><li>要求Centos7 </li><li>确保<code>centos-extras</code>开启，如果没开启可参考<a href="https://wiki.centos.org/AdditionalResources/Repositories">enable centos-extras</a></li></ul><h3 id="2-卸载旧版本"><a href="#2-卸载旧版本" class="headerlink" title="2. 卸载旧版本"></a>2. 卸载旧版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum remove docker \</span></span><br><span class="line"><span class="language-bash">                  docker-client \</span></span><br><span class="line"><span class="language-bash">                  docker-client-latest \</span></span><br><span class="line"><span class="language-bash">                  docker-common \</span></span><br><span class="line"><span class="language-bash">                  docker-latest \</span></span><br><span class="line"><span class="language-bash">                  docker-latest-logrotate \</span></span><br><span class="line"><span class="language-bash">                  docker-logrotate \</span></span><br><span class="line"><span class="language-bash">                  docker-engine</span></span><br></pre></td></tr></table></figure><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h3><p>官网一共提供三种安装方式，接下来采用官网建议的安装方式进行安装</p><h4 id="（1）安装依赖"><a href="#（1）安装依赖" class="headerlink" title="（1）安装依赖"></a>（1）安装依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install -y yum-utils \</span></span><br><span class="line"><span class="language-bash">  device-mapper-persistent-data \</span></span><br><span class="line"><span class="language-bash">  lvm2</span></span><br></pre></td></tr></table></figure><h4 id="（2）添加软件源"><a href="#（2）添加软件源" class="headerlink" title="（2）添加软件源"></a>（2）添加软件源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum-config-manager \</span></span><br><span class="line"><span class="language-bash">    --add-repo \</span></span><br><span class="line"><span class="language-bash">    https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><p>因为国内网络原因，建议执行下面的命令，使用阿里的源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum-config-manager \ </span></span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>如果执行后提示<code>Couldn&#39;t resolve host &#39;mirrors.aliyun.com</code>，可尝试修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi /etc/sysconfig/network-scripts/ifcfg-xxxx</span></span><br><span class="line"></span><br><span class="line">添加DNS，可用你自己喜欢的试试，我是改成这两个了</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DNS1=8.8.8.8</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DNS2=114.114.114.114</span></span><br><span class="line"></span><br><span class="line">重启网卡</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl restart network</span></span><br></pre></td></tr></table></figure><p>理论上上述操作完成后可以完成</p><h4 id="（3）安装最新版本的Docker-Engine-Community-and-containerd"><a href="#（3）安装最新版本的Docker-Engine-Community-and-containerd" class="headerlink" title="（3）安装最新版本的Docker Engine - Community and containerd"></a>（3）安装最新版本的Docker Engine - Community and containerd</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure><p>一直允许到安装结束</p><h4 id="（4）启动Docker"><a href="#（4）启动Docker" class="headerlink" title="（4）启动Docker"></a>（4）启动Docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl start docker</span></span><br></pre></td></tr></table></figure><h4 id="（5）运行Hello-world"><a href="#（5）运行Hello-world" class="headerlink" title="（5）运行Hello-world"></a>（5）运行Hello-world</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run hello-world</span></span><br></pre></td></tr></table></figure><p>命令执行后，如果没有找到该镜像，会从库里进行下载</p><h3 id="4-卸载Docker"><a href="#4-卸载Docker" class="headerlink" title="4. 卸载Docker"></a>4. 卸载Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum remove docker-ce</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">rm</span> -rf /var/lib/docker</span></span><br></pre></td></tr></table></figure><p>至此安装完成，安装步骤均来源于官网且进行了删减</p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Docker/">Docker</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Docker/">Docker</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/62563.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SpringBoot，java统一异常处理</title>
      <link>https://blog.ibean.eu.org/posts/46464.html</link>
      <guid>https://blog.ibean.eu.org/posts/46464.html</guid>
      <pubDate>Sun, 01 Mar 2020 09:57:25 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;1-定义返回的统一对象&quot;&gt;&lt;a href=&quot;#1-定义返回的统一对象&quot; class=&quot;headerlink&quot; title=&quot;1. 定义返回的统一对象&quot;&gt;&lt;/a&gt;1. 定义返回的统一对象&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;tab</description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="1-定义返回的统一对象"><a href="#1-定义返回的统一对象" class="headerlink" title="1. 定义返回的统一对象"></a>1. 定义返回的统一对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> Integer code;</span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"><span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get和set方法；或者lombok的注解</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-ResultUtil"><a href="#2-ResultUtil" class="headerlink" title="2. ResultUtil"></a>2. ResultUtil</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultUtil</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line"><span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">result.setCode(<span class="number">0</span>);</span><br><span class="line">result.setMsg(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">result.setData(obj);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> success(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Integer code,String msg)</span>&#123;</span><br><span class="line"><span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">result.setCode(code);</span><br><span class="line">result.setMsg(msg);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-异常捕获（ExceptionHandler）"><a href="#3-异常捕获（ExceptionHandler）" class="headerlink" title="3. 异常捕获（ExceptionHandler）"></a>3. 异常捕获（ExceptionHandler）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionHandler</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler(value=Exception.class)</span><span class="comment">//声明要捕获的异常类</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">handle</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line"><span class="comment">//非自定义异常，打印异常日志方便定位</span></span><br><span class="line"><span class="keyword">return</span> ResultUtil.error(<span class="number">500</span>,e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-自定义异常类（-Exception）"><a href="#4-自定义异常类（-Exception）" class="headerlink" title="4. 自定义异常类（****Exception）"></a>4. 自定义异常类（****Exception）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"><span class="comment">//spring 只会对runtimeException回滚</span></span><br><span class="line"><span class="keyword">private</span> Integer code;</span><br><span class="line"><span class="comment">//...省略get和set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TestException</span><span class="params">(Integer code,String message)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(message);</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三步添加</span></span><br><span class="line"><span class="keyword">if</span>(e <span class="keyword">instanceof</span> TestException)&#123;</span><br><span class="line"><span class="type">TestException</span> <span class="variable">ee</span> <span class="operator">=</span> (TestException) e;<span class="comment">//类型是我们自定义的话强转异常，通过get取值；</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-枚举管理"><a href="#5-枚举管理" class="headerlink" title="5. 枚举管理"></a>5. 枚举管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">test</span>&#123;</span><br><span class="line">UNKNOWN_ERROR(-<span class="number">1</span>,<span class="string">&quot;unknown&quot;</span>),</span><br><span class="line">SUCCESS(<span class="number">1</span>,<span class="string">&quot;&quot;</span>),</span><br><span class="line">OTHER(<span class="number">100</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">;</span><br><span class="line"><span class="keyword">private</span> Integer code;</span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line">test(Integer code,String msg)&#123;</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line"><span class="built_in">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的自定义异常的构造方法，抛出异常等用到处可能也需要修改</p><h4 id="6-使用"><a href="#6-使用" class="headerlink" title="6. 使用"></a>6. 使用</h4><p>在你需要的地方抛出异常即可，自定义异常也可实现多个构造方法满足相同业务场景下不同的需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TestException</span>(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/SpringBoot/">SpringBoot</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/SpringBoot/">SpringBoot</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/46464.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SpringBoot，Java使用AOP统一处理请求</title>
      <link>https://blog.ibean.eu.org/posts/14945.html</link>
      <guid>https://blog.ibean.eu.org/posts/14945.html</guid>
      <pubDate>Sun, 01 Mar 2020 09:08:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;AOP：面向切面编程；公共行为从业务逻辑分离进行统一处理；&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-添加依赖&quot;&gt;&lt;a href=&quot;#1-添加依赖&quot; class=&quot;headerlink&quot; title=&quot;1. 添加依赖&quot;&gt;&lt;/a&gt;1. 添加依赖&lt;/h4&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>AOP：面向切面编程；公共行为从业务逻辑分离进行统一处理；</strong></p><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-new-Aspect类"><a href="#2-new-Aspect类" class="headerlink" title="2. new Aspect类"></a>2. new Aspect类</h4><p>IDE是idea的话，不是右键后的那个选项，是class<br>添加注解和逻辑代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> class ***Aspect&#123;</span><br><span class="line"><span class="meta">@Before(&quot;execution()&quot;)</span><span class="comment">//接触到业务代码之前处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After(&quot;execution()&quot;)</span><span class="comment">//接触到业务代码之后处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfter</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>execution()的使用参考博客<a href="https://blog.csdn.net/yangshangwei/article/details/77627825">Spring-AOP @AspectJ切点函数之execution()</a></p><p>当存在公用切点时，可采用<code>@Pointcut</code>进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> class ***Aspect&#123;</span><br><span class="line"><span class="meta">@Pointcut(&quot;execution()&quot;)</span><span class="comment">//统一公用代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">common</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;common()&quot;)</span><span class="comment">//接触到业务代码之前处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After(&quot;common()&quot;)</span><span class="comment">//接触到业务代码之后处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfter</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(returning=&quot;obj&quot;,pointcut=&quot;common()&quot;)</span><span class="comment">//方法返回后处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturning</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//url</span></span><br><span class="line">        logger.info(<span class="string">&quot;url=&#123;&#125;&quot;</span>, request.getRequestURL());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method</span></span><br><span class="line">        logger.info(<span class="string">&quot;method=&#123;&#125;&quot;</span>, request.getMethod());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ip</span></span><br><span class="line">        logger.info(<span class="string">&quot;ip=&#123;&#125;&quot;</span>, request.getRemoteAddr());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类方法</span></span><br><span class="line">        logger.info(<span class="string">&quot;class_method=&#123;&#125;&quot;</span>, joinPoint.getSignature().getDeclaringTypeName() + <span class="string">&quot;.&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//参数</span></span><br><span class="line">        logger.info(<span class="string">&quot;args=&#123;&#125;&quot;</span>, joinPoint.getArgs());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-实例"><a href="#4-实例" class="headerlink" title="4.实例"></a>4.实例</h4><p>下面这个例子是最近在公司用到的，做请求拦截<br>首先是注解代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestLimit &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回redis的key</span></span><br><span class="line"><span class="comment">     * 默认类名+方法名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> redis的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求限制后的提示语</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 提示语</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">msg</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;操作频繁&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis超时时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">timeout</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">1000L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是切面的代码，只针对注解拦截，没有对方法做切入点。另外不提供userUtil和redisUtil，根据自己用到的替换这部分代码就好啦，不影响大局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestLimitAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserUtil userUtil;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(cn.xxx.web.config.aspect.annotation.RequestLimit)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeService</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;executeService()&amp;&amp;@annotation(requestLimit)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint, RequestLimit requestLimit)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> requestLimit.msg();</span><br><span class="line">        <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> requestLimit.key();</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> requestLimit.timeout();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(redisKey)) &#123;</span><br><span class="line">            redisKey = joinPoint.getTarget().getClass().getName() + joinPoint.getSignature().getName();</span><br><span class="line">        &#125;</span><br><span class="line">        redisKey = redisKey + userUtil.getOpenId();</span><br><span class="line">        <span class="keyword">if</span> (redisUtils.exists(redisKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> MessageBean.fail(errorMsg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisUtils.set(redisKey, userUtil.getSessionId(), timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            redisUtils.delete(redisKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestLimit(key = WHEELING_REQUEST_PREFIX, msg = &quot;正在抽奖，请稍后...&quot;, timeout = 4 * 1000L)</span></span><br><span class="line"><span class="keyword">public</span> MessageBean <span class="title function_">wheelPay</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sessionId</span> <span class="operator">=</span> userUtil.getSessionId();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(sessionId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MessageBean</span>(ErrorCodeEnum.WEB_NOT_AUTHED);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> orderService.wheelPay(userUtil.getOpenId(), sessionId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/SpringBoot/">SpringBoot</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/SpringBoot/">SpringBoot</category>
      
      <category domain="https://blog.ibean.eu.org/tags/AOP/">AOP</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/14945.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java，SpringBoot项目表单验证</title>
      <link>https://blog.ibean.eu.org/posts/58408.html</link>
      <guid>https://blog.ibean.eu.org/posts/58408.html</guid>
      <pubDate>Sun, 01 Mar 2020 08:49:29 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象内部添加校验注解</span></span><br><span class="line"><span class="meta">@Min(value=1,message=&quot;xxxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String key;</span><br></pre></td></tr></table></figure><table><thead><tr><th>column1</th><th>column2</th><th>column3</th></tr></thead><tbody><tr><td>content1</td><td>content2</td><td>content3</td></tr><tr><td>@AssertFalse</td><td>Boolean,boolean</td><td>验证注解的元素值是false</td></tr><tr><td>@AssertTrue</td><td>Boolean,boolean</td><td>验证注解的元素值是true</td></tr><tr><td>@NotNull</td><td>任意类型</td><td>验证注解的元素值不是null</td></tr><tr><td>@Null</td><td>任意类型验证注解的元素值是null</td><td></td></tr><tr><td>@Min(value&#x3D;值)</td><td>BigDecimal，BigInteger, byte,short, int, long，等任何Number或CharSequence（存储的是数字）子类型</td><td>验证注解的元素值大于等于@Min指定的value值</td></tr><tr><td>@Max（value&#x3D;值）</td><td>和@Min要求一样</td><td>验证注解的元素值小于等于@Max指定的value值</td></tr><tr><td>@DecimalMin(value&#x3D;值)</td><td>和@Min要求一样</td><td>验证注解的元素值大于等于</td></tr><tr><td>@ DecimalMin指定的value值</td><td></td><td></td></tr><tr><td>@DecimalMax(value&#x3D;值)</td><td>和@Min要求一样</td><td>验证注解的元素值小于等于@ DecimalMax指定的value值</td></tr><tr><td>@Digits(integer&#x3D;整数位数, fraction&#x3D;小数位数)</td><td>和@Min要求一样</td><td>验证注解的元素值的整数位数和小数位数上限</td></tr><tr><td>@Size(min&#x3D;下限, max&#x3D;上限)</td><td>字符串、Collection、Map、数组等</td><td>验证注解的元素值的在min和max（包含）指定区间之内，如字符长度、集合大小</td></tr><tr><td>@Past</td><td>java.util.Date,java.util.Calendar;Joda Time类库的日期类型</td><td>验证注解的元素值（日期类型）比当前时间早</td></tr><tr><td>@Future</td><td>与@Past要求一样</td><td>验证注解的元素值（日期类型）比当前时间晚</td></tr><tr><td>@NotBlank</td><td>CharSequence子类型</td><td>验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的首位空格</td></tr><tr><td>@Length(min&#x3D;下限, max&#x3D;上限)</td><td>CharSequence子类型</td><td>验证注解的元素值长度在min和max区间内</td></tr><tr><td>@NotEmpty</td><td>CharSequence子类型、Collection、Map、数组</td><td>验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td></tr><tr><td>@Range(min&#x3D;最小值, max&#x3D;最大值)</td><td>BigDecimal,BigInteger,CharSequence, byte, short, int, long等原子类型和包装类型</td><td>验证注解的元素值在最小值和最大值之间</td></tr><tr><td>@Email(regexp&#x3D;正则表达式,flag&#x3D;标志的模式)</td><td>CharSequence子类型（如String）</td><td>验证注解的元素值是Email，也可以通过regexp和flag指定自定义的email格式</td></tr><tr><td>@Pattern(regexp&#x3D;正则表达式,flag&#x3D;标志的模式)</td><td>String，任何CharSequence的子类型</td><td>验证注解的元素值与指定的正则表达式匹配</td></tr><tr><td>@Valid</td><td>任何非原子类型</td><td>指定递归验证关联的对象；如用户对象中有个地址对象属性，如果想在验证用户对象时一起验证地址对象的话，在地址对象上加@Valid注解即可级联验证</td></tr></tbody></table><p>表格参考链接：<a href="https://www.cnblogs.com/wjh123/p/8745473.html">常用注解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用@Valid修饰待校验的对象</span></span><br><span class="line"><span class="comment">//Bindresult result获取结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">valid</span><span class="params">(<span class="meta">@Valid</span> Entity entity,Bindresult result)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(result.hasErrors())&#123;</span><br><span class="line"><span class="comment">//通过该方法获取默认的错误提示值</span></span><br><span class="line">System.out.println(result.getFieldError().getDefaultMessage())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/SpringBoot/">SpringBoot</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/SpringBoot/">SpringBoot</category>
      
      <category domain="https://blog.ibean.eu.org/tags/Validated/">Validated</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/58408.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>大数据-Hive篇-面试题总结</title>
      <link>https://blog.ibean.eu.org/posts/58315.html</link>
      <guid>https://blog.ibean.eu.org/posts/58315.html</guid>
      <pubDate>Sat, 08 Feb 2020 09:54:43 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;题目来源&lt;/strong&gt; &lt;a href=&quot;https://www.xuehua.us/2018/08/23/%E6%9C%80%E5%85%A8%E8%85%BE%E8%AE%AF%E7%AD%89bat%E5%A4%A7%E6%95%B0%E6%8D%</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>题目来源</strong> <a href="https://www.xuehua.us/2018/08/23/%E6%9C%80%E5%85%A8%E8%85%BE%E8%AE%AF%E7%AD%89bat%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%9599%E9%A2%98%EF%BC%9Ahadoop%E3%80%81java%E3%80%81spark%E3%80%81%E6%9C%BA%E5%99%A8%E7%AE%97%E6%B3%95%E7%AD%89/">最全腾讯等BAT大数据面试99题</a> <strong>以下答案仅供参考，如有错误请指正</strong></p><h2 id="1-hadoop中两个大表实现join的操作，简单描述？"><a href="#1-hadoop中两个大表实现join的操作，简单描述？" class="headerlink" title="1. hadoop中两个大表实现join的操作，简单描述？"></a><strong>1. hadoop中两个大表实现join的操作，简单描述？</strong></h2><p>并没有抓到该题的关键，请大佬指教；<br>关于Hive的Join <em><strong>参考链接</strong> <a href="https://blog.csdn.net/login_sonata/article/details/75000766">Hive基础二（join原理和机制，join的几种类型，数据倾斜简单处理）</a></em></p><hr><h2 id="2-Hive中存放是什么？"><a href="#2-Hive中存放是什么？" class="headerlink" title="2. Hive中存放是什么？"></a><strong>2. Hive中存放是什么？</strong></h2><p>表（数据+元数据）。 存的是和hdfs的映射关系，hive是逻辑上的数据仓库，实际操作的都是hdfs上的文件，HQL就是用sql语法来写的mr程序。</p><hr><h2 id="3-Hive与关系型数据库的关系？"><a href="#3-Hive与关系型数据库的关系？" class="headerlink" title="3. Hive与关系型数据库的关系？"></a><strong>3. Hive与关系型数据库的关系？</strong></h2><p>没有任何关系。Hive是为了方便数据查询减少MR程序的编写，是一次写多次读的操作，不能进行实时的CRUD操作。</p><hr><h2 id="4-讲一下数据库，SQl-，左外连接，-原理，实现？"><a href="#4-讲一下数据库，SQl-，左外连接，-原理，实现？" class="headerlink" title="4. 讲一下数据库，SQl ，左外连接， 原理，实现？"></a><strong>4. 讲一下数据库，SQl ，左外连接， 原理，实现？</strong></h2><p><em><strong>参考链接</strong> <a href="https://www.jianshu.com/p/048d93d3ee54">MySQL查询优化——连接以及连接原理</a></em></p><hr><h2 id="5-大表和小表join？"><a href="#5-大表和小表join？" class="headerlink" title="5. 大表和小表join？"></a><strong>5. 大表和小表join？</strong></h2><p>可以通过<code>/* + streamtable(表) */</code>指定大表，或通过<code> /* + mapjoin(表) */</code>指定小表<br>指定后会将小表数据放入内存更快的join；若不指定 join 默认将最后一个表作为大表；<br>通常 每次写join时可将小表放左侧，大表放右侧</p><hr><h2 id="6-数据清洗怎么做的？怎么用spark做数据清洗？"><a href="#6-数据清洗怎么做的？怎么用spark做数据清洗？" class="headerlink" title="6. 数据清洗怎么做的？怎么用spark做数据清洗？"></a><strong>6. 数据清洗怎么做的？怎么用spark做数据清洗？</strong></h2><hr><h2 id="7-Hadoop中二次排序怎么做？"><a href="#7-Hadoop中二次排序怎么做？" class="headerlink" title="7. Hadoop中二次排序怎么做？"></a><strong>7. Hadoop中二次排序怎么做？</strong></h2><p><em><strong>参考链接</strong> <a href="https://www.jianshu.com/p/9b0493e39876">如何在Map-Reduce中实现二次排序（对Value排序）</a></em></p><hr><h2 id="8-hadoop常见的join操作？"><a href="#8-hadoop常见的join操作？" class="headerlink" title="8. hadoop常见的join操作？"></a><strong>8. hadoop常见的join操作？</strong></h2><p>(1)reduce side join：是最简单的join操作，主要是在reduce端进行join操作；<br>(2)Map side join：之所以存在reduce side join，是因为在map端不能获得需要连接的全部的字段。Reduce side join比较低效，因为shuffle传输数据需要消耗大量的性能。<br>(3)Semijoin：半连接，对于reduce side join，跨机器的数据传输量特别大，成为join的一个瓶颈。如果能在map端过滤掉不会参加join的数据，那么可以大大节省网络IO。</p><hr><h2 id="9-hive优化有哪些？"><a href="#9-hive优化有哪些？" class="headerlink" title="9. hive优化有哪些？"></a><strong>9. hive优化有哪些？</strong></h2><ol><li>Map优化</li><li>reduce优化</li><li>join优化</li></ol><p><em><strong>参考链接</strong> <a href="https://mubu.com/doc/ticO24COz0">Hive-优化</a></em> 密码：ibean.top</p><hr><h2 id="10-分析函数？"><a href="#10-分析函数？" class="headerlink" title="10. 分析函数？"></a><strong>10. 分析函数？</strong></h2><p><em><strong>参考链接</strong> <a href="https://andr-robot.github.io/Hive%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0/">Hive分析函数</a></em></p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Hive/">Hive</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/BigData/">BigData</category>
      
      <category domain="https://blog.ibean.eu.org/tags/Hive/">Hive</category>
      
      <category domain="https://blog.ibean.eu.org/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/58315.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>大数据-Spark篇-面试题总结</title>
      <link>https://blog.ibean.eu.org/posts/45903.html</link>
      <guid>https://blog.ibean.eu.org/posts/45903.html</guid>
      <pubDate>Sat, 08 Feb 2020 09:52:35 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;题目来源&lt;/strong&gt; &lt;a href=&quot;https://www.xuehua.us/2018/08/23/%E6%9C%80%E5%85%A8%E8%85%BE%E8%AE%AF%E7%AD%89bat%E5%A4%A7%E6%95%B0%E6%8D%</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>题目来源</strong> <a href="https://www.xuehua.us/2018/08/23/%E6%9C%80%E5%85%A8%E8%85%BE%E8%AE%AF%E7%AD%89bat%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%9599%E9%A2%98%EF%BC%9Ahadoop%E3%80%81java%E3%80%81spark%E3%80%81%E6%9C%BA%E5%99%A8%E7%AE%97%E6%B3%95%E7%AD%89/">最全腾讯等BAT大数据面试99题</a> <strong>以下答案仅供参考，如有错误请指正</strong></p><h4 id="1-Spark的Shuffle原理及调优？"><a href="#1-Spark的Shuffle原理及调优？" class="headerlink" title="1. Spark的Shuffle原理及调优？"></a><strong>1. Spark的Shuffle原理及调优？</strong></h4><ul><li><strong>原理</strong>：<br>SparkShuffle过程与MapReduce类似；DAG阶段，以Shuffle为界分为map stage和reduce stage，map阶段进行任务计算后下发到各自partition中，同时写入磁盘，该过程为shuffle write；reduce阶段读取map计算后各分区的值进一步计算，该过程为shuffle read；</li><li><strong>调优：</strong><ol><li>尽量减少shuffle次数</li><li>必要时主动shuffle，通常用于改变并行度，提高后续分布式运行速度</li><li>合并Map端输出文件<br>   开启相关设置：<code>conf.set(“spark.shuffle.consolidateFiles”,”  true”)</code></li><li>调节map端内存缓冲区大小和reduce端内存缓冲区内存占比<ul><li><code>spark.shuffle.file.buffer</code>，默认32k</li></ul><p> 在map task处理的数据量比较大的情况下，而你的task的内存缓冲默认是比较小的，32kb。可能会造成多次的map端往磁盘文件的spill溢写操作，发生大量的磁盘IO，从而降低性能。<br> 调优原则：<br> <code>spark.shuffle.file.buffer</code>，每次扩大一倍，然后看看效果，64，128；</p><ul><li><code>spark.shuffle.memoryFraction</code>，0.2</li></ul><p> reduce端聚合内存，占比。默认是0.2。如果数据量比较大，reduce task拉取过来的数据很多，那么就会频繁发生reduce端聚合内存不够用，频繁发生spill操作，溢写到磁盘上去。而且最要命的是，磁盘上溢写的数据量越大，后面在进行聚合操作的时候，很可能会多次读取磁盘中的数据，进行聚合。<br> 调优原则：<br> <code>spark.shuffle.memoryFraction</code>，每次提高0.1，看看效果。</p></li><li>SortShuffle代替HashShuffle，避免创建多分磁盘文件（Spark2.0之后的版本官方仅保留了SortShuffle）</li></ol></li></ul><p><em><strong>参考连接：</strong><a href="http://sharkdtu.com/posts/spark-shuffle.html">Spark Shuffle原理及相关调优</a></em></p><hr><h4 id="2-hadoop和spark使用场景？"><a href="#2-hadoop和spark使用场景？" class="headerlink" title="2. hadoop和spark使用场景？"></a><strong>2. hadoop和spark使用场景？</strong></h4><ul><li><strong>Hadoop</strong><br>离线大数据量批量计算，实时要求性低场景，大数据量存储，日志处理，个性化广告推荐</li><li><strong>Spark</strong><br>内存分布式计算框架，伪实时计算，微批计算达到实时，产品实时推荐</li></ul><hr><h4 id="3-spark如何保证宕机迅速恢复"><a href="#3-spark如何保证宕机迅速恢复" class="headerlink" title="3. spark如何保证宕机迅速恢复?"></a><strong>3. spark如何保证宕机迅速恢复?</strong></h4><ul><li>适当增加Spark的StandBy Master；</li><li>编写脚本定期给Master发心跳，若宕机则进行重启；</li></ul><hr><h4 id="4-hadoop和spark的相同点和不同点？"><a href="#4-hadoop和spark的相同点和不同点？" class="headerlink" title="4. hadoop和spark的相同点和不同点？"></a><strong>4. hadoop和spark的相同点和不同点？</strong></h4><ul><li><p><strong>Hadoop</strong><br>Hadoop的MR为多进程模型，系统稳定性优于Spark，但MR只有Map和Reduce两个阶段，导致表达能力欠缺，操作仅能在这两个阶段完成；同时读写HDFS时会产生大量磁盘IO操作；Hadoop适合于大数据量批量的或者高延迟的离线数据计算；</p></li><li><p><strong>Spark</strong><br>Spark为基于内存的多线程模型，系统稳定性略差，但是计算速度优于Hadoop，同时因为Spark基于内存进行计算，在不对系统进行调优的情况下很容易出现OOM等系统问题，导致任务结束无法继续；提供丰富的算子转换操作；使数据处理不单单拘泥于Map和Reduce，计算模型更加灵活；Spark适合低延迟内存密集型的数据计算；</p></li></ul><hr><h4 id="5-RDD持久化原理？"><a href="#5-RDD持久化原理？" class="headerlink" title="5. RDD持久化原理？"></a><strong>5. RDD持久化原理？</strong></h4><p>通过调用cache()和persist()方法将计算后的数据持久化到内存中；<br>其中cache()的默认实现即为persist(MEMORY_ONLY)；<br>persist()有可选项：</p><ul><li><code>MEMORY_ONLY</code>：仅存于内存，无法存储的partition会被重新计算；</li><li><code>MEMORY_AND_DISK</code>：存于内存和磁盘，无法存储的partition会被写入磁盘，需要时从磁盘读取</li><li><code>MEMORY_ONLY_SER</code>：仅存于内存，但会序列化；序列化减少内存开销，但取用时反序列化会导致CPU占用过高</li><li><code>MEMORY_AND_DISK_SER</code>：同 <code>MEMORY_AND_DISK</code>，但会被序列化</li><li><code>DISK_ONLY</code>：仅存于磁盘；</li><li><code>MEMORY_ONLY_2/MEMERY_AND_DISK_2</code>：尾部加2表示会进行备份，防止数据丢失</li></ul><hr><h4 id="6-checkpoint检查点机制？"><a href="#6-checkpoint检查点机制？" class="headerlink" title="6. checkpoint检查点机制？"></a><strong>6. checkpoint检查点机制？</strong></h4><p>SparkStreaming中的容错保证机制，保证程序出错时，仍可以从检查点恢复，保证数据高可用，同时可以减少回溯时间尽快重新开始计算</p><hr><h4 id="7-checkpoint和持久化机制的区别？"><a href="#7-checkpoint和持久化机制的区别？" class="headerlink" title="7. checkpoint和持久化机制的区别？"></a><strong>7. checkpoint和持久化机制的区别？</strong></h4><p>持久化是将数据保存在磁盘中，RDD的lineage仍旧保持不变，但持久化更容易丢数据，节点故障会导致数据从磁盘和内存中消失；检查点机制会将数据保存到高可用的文件系统中，与此同时lineage发生改变，检查点之前的lineage消失，只有当前点的状态；</p><hr><h4 id="8-Spark-Streaming和Storm有何区别？"><a href="#8-Spark-Streaming和Storm有何区别？" class="headerlink" title="8. Spark Streaming和Storm有何区别？"></a><strong>8. Spark Streaming和Storm有何区别？</strong></h4><ul><li>SparkStreaming 秒级实时计算；RDD 本质是小批量的计算达到实时；但也因此吞吐量高于Storm</li><li>Storm 毫秒级实时计算；数据收到即处理；可以实时调整并行度；<br>所以：对实时性要求高或者数据量存在不稳定的情况下可选Storm，峰值动态调整并行度；对实时性要求一般可选SparkStreaming</li></ul><hr><h4 id="9-RDD机制？"><a href="#9-RDD机制？" class="headerlink" title="9. RDD机制？"></a><strong>9. RDD机制？</strong></h4><p>RDD弹性分布式数据集，一种数据结构，所有算子基于RDD执行；RDD具有很好的容错性，当节点错误partition数据丢失，可通过lineage的关系回溯重新计算partition的值；RDD的弹性体现在于RDD上自动进行内存和磁盘之间权衡和切换的机制。</p><hr><h4 id="10-Spark-streaming以及基本工作原理？"><a href="#10-Spark-streaming以及基本工作原理？" class="headerlink" title="10. Spark streaming以及基本工作原理？"></a><strong>10. Spark streaming以及基本工作原理？</strong></h4><p>SparkStreaming是一个秒级实时的，高吞吐量，利用多种算子和转换完成数据处理的流失批处理框架；<br>streaming接收数据后，将数据划分为一个个的batch交给spark引擎处理，处理后汇总成一个数据流，其中数据依然是一个个batch组成的；</p><hr><h4 id="11-DStream以及基本工作原理？"><a href="#11-DStream以及基本工作原理？" class="headerlink" title="11. DStream以及基本工作原理？"></a><strong>11. DStream以及基本工作原理？</strong></h4><p>Dstream是一个抽象概念，代表一个持续不断的数据源，可由Kafka，flume等主动生成，也可由map，reduce等算子被动生成；<br>Dstream内部不断产生RDD，RDD为一个batch，每个RDD中包含一个时间段的数据；</p><hr><h4 id="12-spark有哪些组件？"><a href="#12-spark有哪些组件？" class="headerlink" title="12. spark有哪些组件？"></a><strong>12. spark有哪些组件？</strong></h4><p>Master管理集群；<br>worker计算节点；<br>Driver运行main函数；<br>Spark Context管理Spark生命周期，Client用户提交程序</p><hr><h4 id="13-spark工作机制？"><a href="#13-spark工作机制？" class="headerlink" title="13. spark工作机制？"></a><strong>13. spark工作机制？</strong></h4><p>用户Client端提交程序，Driver运行程序main方法，生成Spark Context上下文；生成dag图，根据rdd间依赖关系划分task，将task提交到executor中执行；</p><hr><h4 id="14-Spark工作的一个流程？"><a href="#14-Spark工作的一个流程？" class="headerlink" title="14. Spark工作的一个流程？"></a><strong>14. Spark工作的一个流程？</strong></h4><p><img src="/../img/webp.webp" alt="spark工作流程图"></p><ul><li>构建Spark Application的运行环境（启动SparkContext），SparkContext向资源管理器（可以是Standalone、Mesos或YARN）注册并申请运行Executor资源；</li><li>资源管理器分配Executor资源并启动Executor，Executor运行情况将随着心跳发送到资源管理器上；</li><li>SparkContext构建成DAG图，将DAG图分解成Stage，并把Taskset发送给Task Scheduler。Executor向SparkContext申请Task，Task Scheduler将Task发放给Executor运行同时SparkContext将应用程序代码发放给Executor。</li><li>Task在Executor上运行，运行完毕释放所有资源。</li></ul><p><em><strong>参考链接</strong> <a href="https://www.jianshu.com/p/01599e28090d">Spark 工作流程图</a></em></p><hr><h4 id="15-spark核心编程原理？"><a href="#15-spark核心编程原理？" class="headerlink" title="15. spark核心编程原理？"></a><strong>15. spark核心编程原理？</strong></h4><ul><li>定义初始RDD来源，可以为本地文件，HDFS或者输入流；</li><li>对RDD进行计算，通过算子转换等操作</li><li>循环往复程，第一个计算完了以后，数据可能就会到了新的一批节点上，也就是变成一个新的RDD。然后再次反复，针对新的RDD定义计算操作</li><li>获得最终数据保存数据</li></ul><p><em><strong>参考链接</strong> <a href="https://blog.csdn.net/bbaiggey/article/details/51243061">Spark核心编程原理</a></em></p><hr><h4 id="16-spark基本工作原理？"><a href="#16-spark基本工作原理？" class="headerlink" title="16. spark基本工作原理？"></a><strong>16. spark基本工作原理？</strong></h4><p>首先在本地客户端(client)编写spark程序，然后将程序打成jar包，在某台能够连接到spark集群的机器上提交spark程序，spark程序会被提交到spark集群上运行。</p><hr><h4 id="17-spark性能优化有哪些？"><a href="#17-spark性能优化有哪些？" class="headerlink" title="17. spark性能优化有哪些？"></a><strong>17. spark性能优化有哪些？</strong></h4><p>分配更多资源；<br>调整并行度；<br>重构RDD架构以及RDD持久化；<br>广播大变量；<br>使用Kryo序列化；<br>使用fastutil优化数据格式；<br>调节数据本地化等待时长；</p><p><em><strong>参考链接</strong> <a href="https://mubu.com/doc/iK9RFqMfd0">Spark性能调优</a></em> <strong>密码：ibean.top，如果分享关闭请留言</strong></p><hr><h4 id="18-updateStateByKey详解？"><a href="#18-updateStateByKey详解？" class="headerlink" title="18. updateStateByKey详解？"></a><strong>18. updateStateByKey详解？</strong></h4><ul><li>大数量updateBykey不适合，可以采用redis</li><li>key超时，如何清空，来节约内存<br> 由于已存在状态的key，无论是否在新批次里有数据，都会调用updateFunc。<br> 返回None就可以清空超时key</li><li>初始状态<br> 对于状态的算子一定要开启checkpoint，实际就是指定checkpoint目录<br> checkpoint频率：5-10个滑动窗口</li></ul><p><em><strong>参考链接</strong><br><a href="https://mp.weixin.qq.com/s/jQIBvKnNSqRJIAF6Eqcdtg">sparkstreaming状态管理upstatebykey</a><br><a href="https://mp.weixin.qq.com/s/AGdTlglZss7AEtajdsUk6w">sparkstreaming状态管理外部存储篇</a></em></p><hr><h4 id="19-宽依赖和窄依赖？"><a href="#19-宽依赖和窄依赖？" class="headerlink" title="19. 宽依赖和窄依赖？"></a><strong>19. 宽依赖和窄依赖？</strong></h4><ul><li>窄依赖就是指父RDD的每个分区只被一个子RDD分区使用<br>  <img src="/../img/webp-167340514296860.webp" alt="窄依赖"></li><li>宽依赖就是指父RDD的每个分区都有可能被多个子RDD分区使用<br>  <img src="/../img/webp-167340514296861.webp" alt="宽依赖"></li></ul><p><em><strong>参考链接</strong> <a href="https://www.jianshu.com/p/5c2301dfa360">Spark宽依赖与窄依赖</a></em></p><hr><h4 id="20-spark-streaming中有状态转化操作？"><a href="#20-spark-streaming中有状态转化操作？" class="headerlink" title="20. spark streaming中有状态转化操作？"></a><strong>20. spark streaming中有状态转化操作？</strong></h4><p><strong>有状态转化：</strong> 依赖之前的批次数据或者中间结果来计算当前批次的数据，包括<strong>updateStatebyKey()和window()</strong></p><p><em><strong>参考链接</strong> <a href="https://www.jianshu.com/p/031dbd1fa2a7">SparkStreaming入门教程(四)有状态和无状态的转化操作</a></em></p><hr><h4 id="21-spark常用的计算框架？"><a href="#21-spark常用的计算框架？" class="headerlink" title="21. spark常用的计算框架？"></a><strong>21. spark常用的计算框架？</strong></h4><p>Spark Core用于离线计算，Spark SQL用于交互式查询，Spark Streaming用于实时流式计算，Spark MLlib用于机器学习，Spark GraphX用于图计算。<br>Spark主要用于大数据的计算，而hadoop主要用于大数据的存储(比如hdfs、hive和hbase等)，以及资源调度yarn。Spark+hadoop的组合是未来大数据领域的热门组合</p><hr><h4 id="22-spark整体架构？"><a href="#22-spark整体架构？" class="headerlink" title="22. spark整体架构？"></a><strong><del>22. spark整体架构？</del></strong></h4><hr><h4 id="23-Spark的特点是什么？"><a href="#23-Spark的特点是什么？" class="headerlink" title="23. Spark的特点是什么？"></a><strong>23. Spark的特点是什么？</strong></h4><p>(1)速度快：Spark基于内存进行计算（当然也有部分计算基于磁盘，比如shuffle）。<br>(2)容易上手开发：Spark的基于RDD的计算模型，比Hadoop的基于Map-Reduce的计算模型要更加易于理解，更加易于上手开发，实现各种复杂功能，比如二次排序、topn等复杂操作时，更加便捷。<br>(3)超强的通用性：Spark提供了Spark RDD、Spark SQL、Spark Streaming、Spark MLlib、Spark GraphX等技术组件，可以一站式地完成大数据领域的离线批处理、交互式查询、流式计算、机器学习、图计算等常见的任务。<br>(4)集成Hadoop：Spark并不是要成为一个大数据领域的“独裁者”，一个人霸占大数据领域所有的“地盘”，而是与Hadoop进行了高度的集成，两者可以完美的配合使用。Hadoop的HDFS、Hive、HBase负责存储，YARN负责资源调度；Spark复杂大数据计算。实际上，Hadoop+Spark的组合，是一种“double win”的组合。<br>(5)极高的活跃度：Spark目前是Apache基金会的顶级项目，全世界有大量的优秀工程师是Spark的committer。并且世界上很多顶级的IT公司都在大规模地使用Spark。</p><hr><h4 id="24-搭建spark集群步骤？"><a href="#24-搭建spark集群步骤？" class="headerlink" title="24. 搭建spark集群步骤？"></a><strong>24. 搭建spark集群步骤？</strong></h4><ul><li>安装spark包</li><li>修改 spark-env. sh</li><li>修改slaves文件</li><li>分发spark包，安装spark集群</li><li>启动spark集群</li><li>查看集群状态，spark集群的默认web管理页面端口为8080，url为<a href="http://master:8080/">http://master:8080</a></li></ul><hr><h4 id="25-Spark的三种提交模式是什么？"><a href="#25-Spark的三种提交模式是什么？" class="headerlink" title="25. Spark的三种提交模式是什么？"></a><strong>25. Spark的三种提交模式是什么？</strong></h4><ul><li>Spark内核架构，即standalone模式，基于Spark自己的Master-Worker集群；</li><li>基于Yarn的yarn-cluster模式；</li><li>基于Yarn的yarn-client模式。</li></ul><p>如果要切换到第二种和第三种模式，将之前提交spark应用程序的spark-submit脚本，加上–master参数，设置为yarn-cluster，或yarn-client即可。如果没设置就是standalone模式</p><hr><h4 id="26-spark内核架构原理？"><a href="#26-spark内核架构原理？" class="headerlink" title="26. spark内核架构原理？"></a><strong><del>26. spark内核架构原理？</del></strong></h4><hr><h4 id="27-Spark-yarn-cluster架构？"><a href="#27-Spark-yarn-cluster架构？" class="headerlink" title="27. Spark yarn-cluster架构？"></a><strong>27. Spark yarn-cluster架构？</strong></h4><p>Yarn-cluster用于生产环境，优点在于driver运行在NM，没有网卡流量激增的问题。缺点在于调试不方便，本地用spark-submit提交后，看不到log，只能通过yarm application-logs application_id这种命令来查看，很麻烦。<br>(1)将spark程序通过spark-submit命令提交，会发送请求到RM(相当于Master)，请求启动AM；<br>(2)在yarn集群上，RM会分配一个container，在某个NM上启动AM；<br>(3)在NM上会启动AM(相当于Driver)，AM会找RM请求container，启动executor；<br>(4)RM会分配一批container用于启动executor；<br>(5)AM会连接其他NM(相当于worker)，来启动executor；<br>(6)executor启动后，会反向注册到AM。</p><p><em><strong>参考链接</strong> <a href="https://zhuanlan.zhihu.com/p/61902619">Spark on Yarn两种模式剖析</a></em></p><hr><h4 id="28-Spark-yarn-client架构？"><a href="#28-Spark-yarn-client架构？" class="headerlink" title="28. Spark yarn-client架构？"></a><strong>28. Spark yarn-client架构？</strong></h4><p>Yarn-client用于测试，因为driver运行在本地客户端，负责调度application，会与yarn集群产生大量的网络通信，从而导致网卡流量激增，可能会被公司的SA警告。好处在于，直接执行时本地可以看到所有的log，方便调试。<br>(1)将spark程序通过spark-submit命令提交，会发送请求到RM，请求启动AM；<br>(2)在yarn集群上，RM会分配一个container在某个NM上启动application；<br>(3)在NM上会启动application master，但是这里的AM其实只是一个ExecutorLauncher，功能很有限，只会去申请资源。AM会找RM申请container，启动executor；<br>(4)RM会分配一批container用于启动executor；<br>(5)AM会连接其他NM(相当于worker)，用container的资源来启动executor；<br>(6)executor启动后，会反向注册到本地的Driver进程。通过本地的Driver去执行DAGsheduler和Taskscheduler等资源调度。<br>和Spark yarn-cluster的区别在于，cluster模式会在某一个NM上启动AM作为Driver。</p><p><em><strong>参考链接</strong> <a href="https://zhuanlan.zhihu.com/p/61902619">Spark on Yarn两种模式剖析</a></em></p><hr><h4 id="29-SparkContext初始化原理？"><a href="#29-SparkContext初始化原理？" class="headerlink" title="29. SparkContext初始化原理？"></a><strong>29. SparkContext初始化原理？</strong></h4><ul><li>TaskScheduler如何注册application，executor如何反向注册到TaskScheduler；</li><li>DAGScheduler；</li><li>SparkUI。</li></ul><p><em><strong>参考链接</strong> <a href="https://www.jianshu.com/p/8e73d08219bd">sparkContext原理剖析</a></em></p><hr><h4 id="30-Spark主备切换机制原理剖析？"><a href="#30-Spark主备切换机制原理剖析？" class="headerlink" title="30. Spark主备切换机制原理剖析？"></a><strong>30. Spark主备切换机制原理剖析？</strong></h4><ul><li>spark master的主备切换可以基于两种机制，一种是基于文件系统的，一种是基于zookeeper的<ul><li>基于文件系统的主备切换机制在active master挂掉之后，需要我们手动去切换到standby master；</li><li>而基于zookeeper的主备切换机制在active master挂掉之后，可以实现自动的切换到standby master。</li></ul></li><li>这里要说的master主备切换机制就是，在在active master挂掉之后切换到standby master，master会做哪些操作。</li></ul><p><em><strong>参考链接</strong><br><a href="https://www.jianshu.com/p/4e1b2d986883">spark主备切换机制剖析</a>、<br><a href="https://www.jianshu.com/p/c5f51b68a639">spark的主备切换极致原理剖析</a></em></p><hr><h4 id="31-spark支持故障恢复的方式？"><a href="#31-spark支持故障恢复的方式？" class="headerlink" title="31. spark支持故障恢复的方式？"></a><strong>31. spark支持故障恢复的方式？</strong></h4><ul><li>通过血缘关系lineage，当发生故障的时候通过血缘关系回溯，再执行一遍来一层一层恢复数据；</li><li>通过checkpoint()机制，将数据存储到持久化存储中来恢复数据。</li></ul><hr><h4 id="32-spark解决了hadoop的哪些问题？"><a href="#32-spark解决了hadoop的哪些问题？" class="headerlink" title="32. spark解决了hadoop的哪些问题？"></a><strong>32. spark解决了hadoop的哪些问题？</strong></h4><ol><li><ul><li>MR:抽象层次低，需要使用手工代码来完成程序编写，使用上难以上手；</li><li>Spark:Spark采用RDD计算模型，简单容易上手。</li></ul></li><li><ul><li>MR:只提供map和reduce两个操作，表达能力欠缺；</li><li>Spark:Spark采用更加丰富的算子模型，包括map、flatmap、groupbykey、reducebykey等；</li></ul></li><li><ul><li>MR:一个job只能包含map和reduce两个阶段，复杂的任务需要包含很多个job，这些job之间的管理以来需要开发者自己进行管理；</li><li>Spark:Spark中一个job可以包含多个转换操作，在调度时可以生成多个stage，而且如果多个map操作的分区不变，是可以放在同一个task里面去执行；</li></ul></li><li><ul><li>MR:中间结果存放在hdfs中；</li><li>Spark:Spark的中间结果一般存在内存中，只有当内存不够了，才会存入本地磁盘，而不是hdfs；</li></ul></li><li><ul><li>MR:只有等到所有的map task执行完毕后才能执行reduce task；</li><li>Spark:Spark中分区相同的转换构成流水线在一个task中执行，分区不同的需要进行shuffle操作，被划分成不同的stage需要等待前面的stage执行完才能执行。</li></ul></li><li><ul><li>MR:只适合batch批处理，时延高，对于交互式处理和实时处理支持不够；</li><li>Spark:Spark streaming可以将流拆成时间间隔的batch进行处理，实时计算。</li></ul></li><li><ul><li>MR:对于迭代式计算处理较差；</li><li>Spark:Spark将中间数据存放在内存中，提高迭代式计算性能。</li></ul></li></ol><hr><h4 id="33-数据倾斜的产生和解决办法？"><a href="#33-数据倾斜的产生和解决办法？" class="headerlink" title="33. 数据倾斜的产生和解决办法？"></a><strong>33. 数据倾斜的产生和解决办法？</strong></h4><p><em><strong>参考链接</strong> <a href="https://mubu.com/doc/iK9RFqMfd0">Spark性能调优</a> 【六、数据倾斜解决方案】</em> <strong>密码：ibean.top，如果分享关闭请留言</strong></p><hr><h4 id="34-spark-实现高可用性：High-Availability？"><a href="#34-spark-实现高可用性：High-Availability？" class="headerlink" title="34. spark 实现高可用性：High Availability？"></a><strong>34. spark 实现高可用性：High Availability？</strong></h4><ul><li>基于文件系统的单点恢复(Single-Node Recovery with Local File System)</li><li>基于zookeeper的Standby Masters(Standby Masters with ZooKeeper)</li></ul><p><em><strong>参考链接</strong> <a href="https://www.cnblogs.com/byrhuangqiang/p/3937654.html">Spark:Master High Availability（HA）高可用配置的2种实现</a></em></p><hr><h4 id="35-spark实际工作中，是怎么来根据任务量，判定需要多少资源的？"><a href="#35-spark实际工作中，是怎么来根据任务量，判定需要多少资源的？" class="headerlink" title="35. spark实际工作中，是怎么来根据任务量，判定需要多少资源的？"></a><strong>35. spark实际工作中，是怎么来根据任务量，判定需要多少资源的？</strong></h4><hr><h4 id="36-spark中怎么解决内存泄漏问题？"><a href="#36-spark中怎么解决内存泄漏问题？" class="headerlink" title="36. spark中怎么解决内存泄漏问题？"></a><strong>36. spark中怎么解决内存泄漏问题？</strong></h4><ol><li>driver端<ul><li>可以增大driver的内存参数：<code>spark.driver.memory</code> (default 1g)</li><li>DAGScheduler和Spark Context运行在Driver端，rdd的stage切分由driver完成；当程序算子过多可能会切分出大量stage，占用driver内存</li></ul></li><li>map过程产生大量对象<ul><li>单个map产生大量对象导致； </li><li>不增加内存的情况下，减少每个task的大小；可以在会产生大量对象的map操作之前调用repartition方法，分区成更小的块传入map</li></ul></li><li>数据不平衡导致内存溢出，解决方案与2相似，采用repartition的方式；</li><li>shuffle后内存溢出</li></ol><p><em><strong>参考链接</strong> <a href="https://blog.csdn.net/Sunshine_2211468152/article/details/83050337">spark 如何防止内存溢出</a></em></p><hr>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Spark/">Spark</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Spark/">Spark</category>
      
      <category domain="https://blog.ibean.eu.org/tags/BigData/">BigData</category>
      
      <category domain="https://blog.ibean.eu.org/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/45903.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Centos7离线安装Vim</title>
      <link>https://blog.ibean.eu.org/posts/52460.html</link>
      <guid>https://blog.ibean.eu.org/posts/52460.html</guid>
      <pubDate>Wed, 08 Jan 2020 02:01:28 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;下载离线安装包&quot;&gt;&lt;a href=&quot;#下载离线安装包&quot; class=&quot;headerlink&quot; title=&quot;下载离线安装包&quot;&gt;&lt;/a&gt;下载离线安装包&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://download.csdn.net/download/github</description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="下载离线安装包"><a href="#下载离线安装包" class="headerlink" title="下载离线安装包"></a>下载离线安装包</h4><p><a href="https://download.csdn.net/download/github_36887863/12074807">vim-8.2.tar.bz2</a></p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bunzip2 vim-8.2.tar.bz2</span><br></pre></td></tr></table></figure><h4 id="再解压"><a href="#再解压" class="headerlink" title="再解压"></a>再解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf vim-8.2.tar</span><br></pre></td></tr></table></figure><h4 id="进入解压目录"><a href="#进入解压目录" class="headerlink" title="进入解压目录"></a>进入解压目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd vim82</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --disable-selinux --enable-cscope</span><br></pre></td></tr></table></figure><p>如果此处报错<br>no terminal library found<br>checking for tgetent()… configure: error: NOT FOUND!<br>      You need to install a terminal library; for example ncurses.<br>      Or specify the name of the library with –with-tlib.<br>      <a href="http://mirror.centos.org/centos/7/os/x86_64/Packages/ncurses-devel-5.9-14.20130511.el7_4.x86_64.rpm">点击下载ncurses</a></p><p>rpm -ivh xxxxxxxx<br>安装完成后<br>重新执行该步骤</p><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Centos7/">Centos7</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Centos7/">Centos7</category>
      
      <category domain="https://blog.ibean.eu.org/tags/vim/">vim</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/52460.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>（转）Kafka2.2.0集群搭建</title>
      <link>https://blog.ibean.eu.org/posts/39390.html</link>
      <guid>https://blog.ibean.eu.org/posts/39390.html</guid>
      <pubDate>Mon, 18 Nov 2019 13:10:24 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;主要参考这两篇文章&quot;&gt;&lt;a href=&quot;#主要参考这两篇文章&quot; class=&quot;headerlink&quot; title=&quot;主要参考这两篇文章&quot;&gt;&lt;/a&gt;主要参考这两篇文章&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zouhuu/arti</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="主要参考这两篇文章"><a href="#主要参考这两篇文章" class="headerlink" title="主要参考这两篇文章"></a>主要参考这两篇文章</h2><p><a href="https://blog.csdn.net/zouhuu/article/details/89166384">Kafka2.2.0集群搭建（1）</a><br><a href="https://blog.csdn.net/lwf006164/article/details/94143819">Kafka2.2.0集群搭建（2）</a></p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Kafka/">Kafka</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Kafka/">Kafka</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/39390.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初入Storm开发遇到的问题</title>
      <link>https://blog.ibean.eu.org/posts/4561.html</link>
      <guid>https://blog.ibean.eu.org/posts/4561.html</guid>
      <pubDate>Fri, 08 Mar 2019 06:59:37 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;new-Fields是干啥的&quot;&gt;&lt;a href=&quot;#new-Fields是干啥的&quot; class=&quot;headerlink&quot; title=&quot;new Fields是干啥的&quot;&gt;&lt;/a&gt;new Fields是干啥的&lt;/h1&gt;&lt;p&gt;declare的时候，new Fields(</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="new-Fields是干啥的"><a href="#new-Fields是干啥的" class="headerlink" title="new Fields是干啥的"></a>new Fields是干啥的</h1><p>declare的时候，new Fields(“A”,”B”)<br>emit的时候，new Value(“a”,”b”)<br><strong>declare的fields的size要和value的size相等否则会报错</strong><br>这个是对应的<br>所以接收的时候tuple.getString(index)这个index就代表着ab的位置<br>返回的tuple中获得的是这个地方的数据</p><p><img src="/../img/20190308153111229.png" alt="在这里插入图片描述"><img src="/../img/20190308153058392.png" alt="在这里插入图片描述"><br><img src="/../img/20190308153122480.png" alt="在这里插入图片描述"><br>同时，可以通过getStringByField这个方法获得指定field的值<br><img src="/../img/20190308153144997.png" alt="在这里插入图片描述"></p><h1 id="Message-ID这个又是干啥的"><a href="#Message-ID这个又是干啥的" class="headerlink" title="Message ID这个又是干啥的"></a>Message ID这个又是干啥的</h1><p>这个值可填可不填<br>当not null时，ack和fail的回调会执行，被storm监控，所以可以在这两个回调函数里记录状态写到日志里，这样排错的时候就能定位了<br>当msgid为null时，可以理解为虽然任务执行了，但是这个事件丢失了，没有人知道他，他是个没身份证的人，不受到storm的监控，也就自然没法对他定位了<br><img src="/../img/20190308153307329.png" alt="在这里插入图片描述"></p><h1 id="开发遇到的报错问题-Local模式"><a href="#开发遇到的报错问题-Local模式" class="headerlink" title="开发遇到的报错问题 Local模式"></a>开发遇到的报错问题 Local模式</h1><ol><li><strong>一点运行马上报这个错</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: org/apache/storm/generated/AlreadyAliveException</span><br><span class="line">at java.lang.Class.getDeclaredMethods0(Native Method)</span><br><span class="line">at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)</span><br><span class="line">at java.lang.Class.privateGetMethodRecursive(Class.java:3048)</span><br><span class="line">at java.lang.Class.getMethod0(Class.java:3018)</span><br><span class="line">at java.lang.Class.getMethod(Class.java:1784)</span><br><span class="line">at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)</span><br><span class="line">at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.apache.storm.generated.AlreadyAliveException</span><br><span class="line">at java.net.URLClassLoader.findClass(URLClassLoader.java:381)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class="line">at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:338)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class="line">... 7 more</span><br><span class="line">Error: A JNI error has occurred, please check your installation and try again</span><br><span class="line">Exception in thread &quot;main&quot; </span><br></pre></td></tr></table></figure><p>90%的原因出在pom文件上<br><img src="/../img/20190308145414832.png" alt="在这里插入图片描述"><br>scope在本地调试的时候不要用provided的方式，不写或者用compile，问题可解决</p><ol start="2"><li><strong>仔细，不贴报错信息了Topology submission exception</strong><br><img src="/../img/20190308145644228.png" alt="在这里插入图片描述"><br>请注意红框和蓝框的位置，因为第一次写，蒙蒙叨叨的把grouping时的红蓝框写反了。导致报错啊</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">26605 [main] WARN  o.a.s.d.nimbus - Topology submission exception. (topology name=&#x27;word-count-local&#x27;) #error &#123;</span><br><span class="line"> :cause nil</span><br><span class="line"> :via</span><br><span class="line"> [&#123;:type org.apache.storm.generated.InvalidTopologyException</span><br><span class="line">   :message nil</span><br><span class="line">   :at [org.apache.storm.daemon.common$validate_structure_BANG_ invoke common.clj 178]&#125;]</span><br><span class="line"> :trace</span><br><span class="line"> [[org.apache.storm.daemon.common$validate_structure_BANG_ invoke common.clj 178]</span><br><span class="line">  [org.apache.storm.daemon.common$system_topology_BANG_ invoke common.clj 374]</span><br><span class="line">  [org.apache.storm.daemon.nimbus$mk_reified_nimbus$reify__10781 submitTopologyWithOpts nimbus.clj 1727]</span><br><span class="line">  [org.apache.storm.daemon.nimbus$mk_reified_nimbus$reify__10781 submitTopology nimbus.clj 1761]</span><br><span class="line">  [sun.reflect.NativeMethodAccessorImpl invoke0 NativeMethodAccessorImpl.java -2]</span><br><span class="line">  [sun.reflect.NativeMethodAccessorImpl invoke NativeMethodAccessorImpl.java 62]</span><br><span class="line">  [sun.reflect.DelegatingMethodAccessorImpl invoke DelegatingMethodAccessorImpl.java 43]</span><br><span class="line">  [java.lang.reflect.Method invoke Method.java 498]</span><br><span class="line">  [clojure.lang.Reflector invokeMatchingMethod Reflector.java 93]</span><br><span class="line">  [clojure.lang.Reflector invokeInstanceMethod Reflector.java 28]</span><br><span class="line">  [org.apache.storm.testing$submit_local_topology invoke testing.clj 310]</span><br><span class="line">  [org.apache.storm.LocalCluster$_submitTopology invoke LocalCluster.clj 49]</span><br><span class="line">  [org.apache.storm.LocalCluster submitTopology nil -1]</span><br><span class="line">  [Start main Start.java 28]]&#125;</span><br><span class="line">26606 [main] ERROR o.a.s.s.o.a.z.s.NIOServerCnxnFactory - Thread Thread[main,5,main] died</span><br><span class="line">org.apache.storm.generated.InvalidTopologyException: null</span><br><span class="line">at org.apache.storm.daemon.common$validate_structure_BANG_.invoke(common.clj:178) ~[storm-core-1.1.2.jar:1.1.2]</span><br><span class="line">at org.apache.storm.daemon.common$system_topology_BANG_.invoke(common.clj:374) ~[storm-core-1.1.2.jar:1.1.2]</span><br><span class="line">at org.apache.storm.daemon.nimbus$mk_reified_nimbus$reify__10781.submitTopologyWithOpts(nimbus.clj:1727) ~[storm-core-1.1.2.jar:1.1.2]</span><br><span class="line">at org.apache.storm.daemon.nimbus$mk_reified_nimbus$reify__10781.submitTopology(nimbus.clj:1761) ~[storm-core-1.1.2.jar:1.1.2]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]</span><br><span class="line">at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:93) ~[clojure-1.7.0.jar:?]</span><br><span class="line">at clojure.lang.Reflector.invokeInstanceMethod(Reflector.java:28) ~[clojure-1.7.0.jar:?]</span><br><span class="line">at org.apache.storm.testing$submit_local_topology.invoke(testing.clj:310) ~[storm-core-1.1.2.jar:1.1.2]</span><br><span class="line">at org.apache.storm.LocalCluster$_submitTopology.invoke(LocalCluster.clj:49) ~[storm-core-1.1.2.jar:1.1.2]</span><br><span class="line">at org.apache.storm.LocalCluster.submitTopology(Unknown Source) ~[storm-core-1.1.2.jar:1.1.2]</span><br><span class="line">at Start.main(Start.java:28) ~[classes/:?]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Storm/">Storm</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/BigData/">BigData</category>
      
      <category domain="https://blog.ibean.eu.org/tags/Storm/">Storm</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/4561.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hive1.2.2环境搭建（MariaDB版）【填坑】</title>
      <link>https://blog.ibean.eu.org/posts/2625.html</link>
      <guid>https://blog.ibean.eu.org/posts/2625.html</guid>
      <pubDate>Tue, 08 Jan 2019 14:27:20 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;2019.1.23	填坑，&lt;a href=&quot;#wrong2&quot;&gt;点我鸭&lt;/a&gt;.&lt;br&gt;2019.1.11	更新错误填坑，&lt;a href=&quot;#wrong1&quot;&gt;点我鸭&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;

&lt;h1 id=&quot;1-下载&quot;&gt;&lt;a href=&quot;#1-下载&quot; class=&quot;hea</description>
        
      
      
      
      <content:encoded><![CDATA[<p>2019.1.23填坑，<a href="#wrong2">点我鸭</a>.<br>2019.1.11更新错误填坑，<a href="#wrong1">点我鸭</a>.</p><hr><h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h1><p>Hive下载具体参考官网；<br>MariaDB安装参考百度附链接；<br><a href="https://www.cnblogs.com/zhanzhan/p/7729981.html">centos 7 mariadb安装</a><br><img src="/../img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zNjg4Nzg2Mw==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h1 id="2-解压Hive1-2-2并重命名为hive1-2-2"><a href="#2-解压Hive1-2-2并重命名为hive1-2-2" class="headerlink" title="2. 解压Hive1.2.2并重命名为hive1.2.2"></a>2. 解压Hive1.2.2并重命名为hive1.2.2</h1><h1 id="3-配置文件修改"><a href="#3-配置文件修改" class="headerlink" title="3. 配置文件修改"></a>3. 配置文件修改</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd hive-1.2.2/conf</span><br></pre></td></tr></table></figure><h3 id="（1）创建hive-site-xml"><a href="#（1）创建hive-site-xml" class="headerlink" title="（1）创建hive-site.xml"></a>（1）创建hive-site.xml</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch hive-site.xml</span><br></pre></td></tr></table></figure><h3 id="（2）编辑hive-site-xml（心情好的时候重新整理一下这一步）"><a href="#（2）编辑hive-site-xml（心情好的时候重新整理一下这一步）" class="headerlink" title="（2）编辑hive-site.xml（心情好的时候重新整理一下这一步）"></a>（2）编辑hive-site.xml（心情好的时候重新整理一下这一步）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>创建数据库时的用户名<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>创建数据库时的密码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span>      #会在hdfs生成相应路径</span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>/hive/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span>     #会在hdfs生成相应路径</span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.querylog.location<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>/hive/log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（3）编辑hive-env-sh"><a href="#（3）编辑hive-env-sh" class="headerlink" title="（3）编辑hive-env.sh"></a>（3）编辑hive-env.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp hive-env.sh.template hive-env.sh</span><br></pre></td></tr></table></figure><h3 id="（4）编辑内容"><a href="#（4）编辑内容" class="headerlink" title="（4）编辑内容"></a>（4）编辑内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim hive-env.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加相关目录</span></span><br><span class="line">export JAVA_HOME=/usr/local/src/jdk1.8.0_191</span><br><span class="line">export HADOOP_HOME=/usr/local/src/hadoop-2.7.7</span><br><span class="line">export HIVE_HOME=/usr/local/src/hive-1.2.2</span><br><span class="line">export HIVE_CONF_DIR=/usr/local/src/hive-1.2.2/conf</span><br></pre></td></tr></table></figure><h3 id="（5）复制日志配置"><a href="#（5）复制日志配置" class="headerlink" title="（5）复制日志配置"></a>（5）复制日志配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp hive-exec-log4j.properties.template hive-exec-log4j.properties</span><br><span class="line">cp hive-log4j.properties.template hive-log4j.properties</span><br></pre></td></tr></table></figure><h1 id="4-创建相关目录（暂时没发现有什么用，可能没用吧）"><a href="#4-创建相关目录（暂时没发现有什么用，可能没用吧）" class="headerlink" title="4.创建相关目录（暂时没发现有什么用，可能没用吧）"></a>4.创建相关目录（暂时没发现有什么用，可能没用吧）</h1><p>&#x2F;usr&#x2F;local&#x2F;src&#x2F;hive-1.2.2&#x2F;warehouse<br>&#x2F;usr&#x2F;local&#x2F;src&#x2F;hive-1.2.2&#x2F;tmp<br>&#x2F;usr&#x2F;local&#x2F;src&#x2F;hive-1.2.2&#x2F;log</p><h1 id="5-修改环境变量"><a href="#5-修改环境变量" class="headerlink" title="5.修改环境变量"></a>5.修改环境变量</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hive</span></span><br><span class="line">export HIVE_HOME=/usr/local/src/hive-1.2.2</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure><p>生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h1 id="6-下载Mysql-connector-的jar包"><a href="#6-下载Mysql-connector-的jar包" class="headerlink" title="6.下载Mysql connector 的jar包"></a>6.下载Mysql connector 的jar包</h1><p>因为安装的MariaDB所以就想着用MariaDB的jar包，但是实测不好使，所以还是下载MySQL的</p><p>用wget 方式获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.13.tar.gz</span><br></pre></td></tr></table></figure><p>之后解压，复制jar包到hive的lib目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mysql-connector-java-8.0.13/mysql-connector-java-8.0.13.jar hive-1.2.2/lib/</span><br></pre></td></tr></table></figure><h1 id="7-简单测试"><a href="#7-简单测试" class="headerlink" title="7.简单测试"></a>7.简单测试</h1><p>输入 hive 命令<br><img src="/../img/20190108221616592.png" alt="在这里插入图片描述"><br>成功进入hive-cli界面<br>输入 show databases; 注意最后的分号<br><img src="/../img/20190108221714505.png" alt="在这里插入图片描述"></p><hr><p>至此基本完成<br>安装参考<br><a href="https://note.youdao.com/ynoteshare1/index.html?id=40d2eb78cbed2e69890fa6edd911f102&type=notebook#/EF02B56D99A64FB0888E48C8C792100C">Hive1.x</a><br><a href="https://www.cnblogs.com/reblue520/p/7993026.html">基于Hadoop2.7.3集群数据仓库Hive1.2.2的部署及使用</a> （详细测试参考该链接的测试部分）</p><hr><h2 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a><div id="wrong1">错误1</div></h2><p>向 hive 数据库中写入数据时</p><pre><code>load data local inpath &quot;/home/ibean/student.txt&quot; into table student;</code></pre><p>报错信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; load data local inpath &quot;/home/ibean/student.txt&quot; into table student;</span><br><span class="line">Loading data to table testhive.student</span><br><span class="line">Failed with exception Unable to move source file:/home/ibean/student.txt to destination hdfs://master:9000/usr/local/src/hive-1.2.2/warehouse/testhive.db/student/student.txt</span><br><span class="line">FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.MoveTask</span><br></pre></td></tr></table></figure><p>查看hive日志：日志目录在本地文件系统 &#x2F;tmp&#x2F;当前用户名&#x2F;hive.log</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.hadoop.ipc.RemoteException(java.io.IOException): File /usr/local/src/hive-1.2.2/warehouse/testhive.db/student/student.txt could only be replicated to 0 nodes instead of minReplication (=1).  There are 0 datanode(s) running and no node(s) are excluded in this operation.</span><br></pre></td></tr></table></figure><p>关键点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There are 0 datanode(s) running and no node(s) are excluded in this operation</span><br></pre></td></tr></table></figure><p>好吧。。。忘启动从节点。。。节点启动成功以后正常。</p><h2 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a><div id='wrong2'>错误2</div></h2><p>中文乱码<br><img src="/../img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zNjg4Nzg2Mw==,size_16,color_FFFFFF,t_70-167340512453249.png" alt="在这里插入图片描述"></p><p>进入mariadb，use hive，下面的都执行一遍就好了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alter table COLUMNS_V2 modify column COMMENT varchar(256) character set utf8;</span><br><span class="line">alter table TABLE_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</span><br><span class="line">alter table PARTITION_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8 ;</span><br><span class="line">alter table PARTITION_KEYS modify column PKEY_COMMENT varchar(4000) character set utf8;</span><br><span class="line">alter table INDEX_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</span><br></pre></td></tr></table></figure><p>执行完这些，删掉原来的表重新创建一次就可以了</p><blockquote><p>参考博文：<a href="https://www.cnblogs.com/qingyunzong/p/8724155.html">https://www.cnblogs.com/qingyunzong/p/8724155.html</a></p></blockquote><h2 id="关于录入数据的点点问题"><a href="#关于录入数据的点点问题" class="headerlink" title="关于录入数据的点点问题"></a>关于录入数据的点点问题</h2><p>在读取数据的时候有时候可能会遇到表头或者表尾<br><img src="/../img/20190123170658462.png" alt="在这里插入图片描述"><br>这样load的时候表头也会录入，所以在创建表的时候添加以下，跟在创建表后面，分号之前</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tblproperties(</span><br><span class="line">&quot;skip.header.line.count&quot;=&quot;1&quot;,  --跳过文件行首1行</span><br><span class="line">&quot;skip.footer.line.count&quot;=&quot;1&quot;   --跳过文件行尾1行</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create external table if not exists ratings(</span><br><span class="line">    userId  int comment &#x27;用户id&#x27;,</span><br><span class="line">    movieId int comment &#x27;电影ID&#x27;,</span><br><span class="line">    rating  int comment &#x27;用户对电影的打分&#x27;,</span><br><span class="line">    time    string  comment &#x27;时间&#x27;</span><br><span class="line">)</span><br><span class="line">row format delimited fields terminated by &#x27;,&#x27; </span><br><span class="line">stored as textfile</span><br><span class="line">tblproperties (&quot;skip.header.line.count&quot;=&quot;1&quot;);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Hive/">Hive</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/BigData/">BigData</category>
      
      <category domain="https://blog.ibean.eu.org/tags/Hive/">Hive</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/2625.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CentOS切换Scala版本时未发生变化</title>
      <link>https://blog.ibean.eu.org/posts/65269.html</link>
      <guid>https://blog.ibean.eu.org/posts/65269.html</guid>
      <pubDate>Tue, 08 Jan 2019 12:17:48 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;当前虚拟机CentOS7，且已位于root用户&lt;br&gt;安装的是2.10.5版本的Scala，且在.bashrc中配置了相应的环境变量&lt;br&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>当前虚拟机CentOS7，且已位于root用户<br>安装的是2.10.5版本的Scala，且在.bashrc中配置了相应的环境变量<br>此时<br>需要更改Scala版本为2.11.8，且在.bashrc中配置了新的环境变量，并source重新生效</p><h3 id="产生问题"><a href="#产生问题" class="headerlink" title="产生问题"></a>产生问题</h3><p>输入<strong>scala -version</strong>发现版本依旧为2.10.5<br>但此时版本应该为2.11.8才为正解</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>CTRL + D退出当前用户，然后重新进入<br>输入<strong>scala -version</strong> 版本变为2.11.8</p><hr><blockquote><p><strong>注：</strong> 以上问题解决方案仅供参考，具体情况需具体分析</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Scala/">Scala</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Scala/">Scala</category>
      
      <category domain="https://blog.ibean.eu.org/tags/Centos/">Centos</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/65269.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Spark2.0.2+Scala2.11.8环境搭建</title>
      <link>https://blog.ibean.eu.org/posts/64906.html</link>
      <guid>https://blog.ibean.eu.org/posts/64906.html</guid>
      <pubDate>Mon, 24 Dec 2018 04:42:45 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;此处更正Spark版本和Scala版本的关系：&lt;br&gt;如官网所述。。。下面写的时候有误【虽然也能用，不过还是按照官网来吧】&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://image-oss-ibean.test.upcdn.net/blog/20</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>此处更正Spark版本和Scala版本的关系：<br>如官网所述。。。下面写的时候有误【虽然也能用，不过还是按照官网来吧】</strong><br><img src="http://image-oss-ibean.test.upcdn.net/blog/20190108195223672.png!o" alt="在这里插入图片描述"></p><hr><h3 id="1-下载Spark"><a href="#1-下载Spark" class="headerlink" title="1. 下载Spark"></a>1. 下载Spark</h3><p><a href="http://spark.apache.org/downloads.html">点击去官网</a><br>然后选择下载版本<br>红框根据自己需要选择，这里选2.0.2<br><strong>注意蓝框部分需要和你安装的Hadoop版本一致，因为我的机器是2.7.5所以这里选Hadoop2.7</strong><br><img src="http://image-oss-ibean.test.upcdn.net/blog/20181224122332245.png!o" alt="在这里插入图片描述"></p><h3 id="2-上传spark到虚拟机，解压"><a href="#2-上传spark到虚拟机，解压" class="headerlink" title="2. 上传spark到虚拟机，解压"></a>2. 上传spark到虚拟机，解压</h3><h3 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3. 设置环境变量"></a>3. 设置环境变量</h3><p>编辑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>输入，SPARK_HOME 换成你的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_HOME=/usr/local/src/spark-2.0.2</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin</span><br></pre></td></tr></table></figure><p>生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="4-配置spark-env"><a href="#4-配置spark-env" class="headerlink" title="4. 配置spark-env"></a>4. 配置spark-env</h3><p>进入目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/spark-2.0.2/conf</span><br></pre></td></tr></table></figure><p>拷贝一份模板文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp spark-env.sh.template spark-env.sh</span><br></pre></td></tr></table></figure><p>编辑 spark-env.sh，JAVA_HOME、SCALA_HOME、HADOOP_HOME换成你的虚拟机中对应的目录【稍后安装Scala】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/src/jdk1.8.0_191</span><br><span class="line">export SCALA_HOME=/usr/local/src/scala-2.10.7</span><br><span class="line">export HADOOP_HOME=/usr/local/src/hadoop-2.7.7</span><br><span class="line"></span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export SPARK_MASTER_IP=master</span><br><span class="line">export SPARK_WORKER_MEMORY=1g</span><br></pre></td></tr></table></figure><h3 id="5-配置slaves"><a href="#5-配置slaves" class="headerlink" title="5. 配置slaves"></a>5. 配置slaves</h3><p>依旧再 &#x2F;usr&#x2F;local&#x2F;src&#x2F;spark-2.0.2&#x2F;conf 这个目录下<br>拷贝一份模板文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp slaves.template slaves</span><br></pre></td></tr></table></figure><p>编辑slaves</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure><h3 id="6-节点分发"><a href="#6-节点分发" class="headerlink" title="6. 节点分发"></a>6. 节点分发</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /usr/local/src/spark-2.0.2/ slave1:/usr/local/src</span><br><span class="line">scp -r /usr/local/src/spark-2.0.2/ slave2:/usr/local/src</span><br></pre></td></tr></table></figure><h3 id="7-下载Scala"><a href="#7-下载Scala" class="headerlink" title="7. 下载Scala"></a>7. 下载Scala</h3><p>这里用2.10.7【因为Spark按照的<strong>2.x</strong>所以Scala版本更正为**2.11.x+**】<br><a href="https://downloads.lightbend.com/scala/2.10.7/scala-2.10.7.tgz">https://downloads.lightbend.com/scala/2.10.7/scala-2.10.7.tgz</a></p><h3 id="8-上传解压"><a href="#8-上传解压" class="headerlink" title="8. 上传解压"></a>8. 上传解压</h3><h3 id="9-配置环境变量"><a href="#9-配置环境变量" class="headerlink" title="9. 配置环境变量"></a>9. 配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scala</span></span><br><span class="line">export SCALA_HOME=/usr/local/src/scala-2.10.7</span><br><span class="line">export PATH=$PATH:$SCALA_HOME/bin</span><br><span class="line"></span><br><span class="line">配置生效</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>输入scala<br><img src="http://image-oss-ibean.test.upcdn.net/blog/20181224123856351.png!o" alt="在这里插入图片描述"><br>安装成功</p><h3 id="10-节点分发"><a href="#10-节点分发" class="headerlink" title="10. 节点分发"></a>10. 节点分发</h3><p>略~</p><h3 id="11-启动spark集群"><a href="#11-启动spark集群" class="headerlink" title="11. 启动spark集群"></a>11. 启动spark集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/spark-2.0.2/sbin</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><h3 id="11-验证"><a href="#11-验证" class="headerlink" title="11. 验证"></a>11. 验证</h3><p>查看jps<br><img src="http://image-oss-ibean.test.upcdn.net/blog/20181224124102791.png!o" alt="在这里插入图片描述"><br>浏览器输入ip:8080<br><img src="http://image-oss-ibean.test.upcdn.net/blog/20181224124138647.png!o" alt="在这里插入图片描述"><strong>此处更正Spark版本和Scala版本的关系：<br>如官网所述。。。下面写的时候有误【虽然也能用，不过还是按照官网来吧】</strong><br><img src="http://image-oss-ibean.test.upcdn.net/blog/20190108195223672.png!o" alt="在这里插入图片描述"></p><hr><h3 id="1-下载Spark-1"><a href="#1-下载Spark-1" class="headerlink" title="1. 下载Spark"></a>1. 下载Spark</h3><p><a href="http://spark.apache.org/downloads.html">点击去官网</a><br>然后选择下载版本<br>红框根据自己需要选择，这里选2.0.2<br><strong>注意蓝框部分需要和你安装的Hadoop版本一致，因为我的机器是2.7.5所以这里选Hadoop2.7</strong><br><img src="http://image-oss-ibean.test.upcdn.net/blog/20181224122332245.png!o" alt="在这里插入图片描述"></p><h3 id="2-上传spark到虚拟机，解压-1"><a href="#2-上传spark到虚拟机，解压-1" class="headerlink" title="2. 上传spark到虚拟机，解压"></a>2. 上传spark到虚拟机，解压</h3><h3 id="3-设置环境变量-1"><a href="#3-设置环境变量-1" class="headerlink" title="3. 设置环境变量"></a>3. 设置环境变量</h3><p>编辑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>输入，SPARK_HOME 换成你的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_HOME=/usr/local/src/spark-2.0.2</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin</span><br></pre></td></tr></table></figure><p>生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="4-配置spark-env-1"><a href="#4-配置spark-env-1" class="headerlink" title="4. 配置spark-env"></a>4. 配置spark-env</h3><p>进入目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/spark-2.0.2/conf</span><br></pre></td></tr></table></figure><p>拷贝一份模板文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp spark-env.sh.template spark-env.sh</span><br></pre></td></tr></table></figure><p>编辑 spark-env.sh，JAVA_HOME、SCALA_HOME、HADOOP_HOME换成你的虚拟机中对应的目录【稍后安装Scala】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/src/jdk1.8.0_191</span><br><span class="line">export SCALA_HOME=/usr/local/src/scala-2.10.7</span><br><span class="line">export HADOOP_HOME=/usr/local/src/hadoop-2.7.7</span><br><span class="line"></span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export SPARK_MASTER_IP=master</span><br><span class="line">export SPARK_WORKER_MEMORY=1g</span><br></pre></td></tr></table></figure><h3 id="5-配置slaves-1"><a href="#5-配置slaves-1" class="headerlink" title="5. 配置slaves"></a>5. 配置slaves</h3><p>依旧再 &#x2F;usr&#x2F;local&#x2F;src&#x2F;spark-2.0.2&#x2F;conf 这个目录下<br>拷贝一份模板文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp slaves.template slaves</span><br></pre></td></tr></table></figure><p>编辑slaves</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure><h3 id="6-节点分发-1"><a href="#6-节点分发-1" class="headerlink" title="6. 节点分发"></a>6. 节点分发</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /usr/local/src/spark-2.0.2/ slave1:/usr/local/src</span><br><span class="line">scp -r /usr/local/src/spark-2.0.2/ slave2:/usr/local/src</span><br></pre></td></tr></table></figure><h3 id="7-下载Scala-1"><a href="#7-下载Scala-1" class="headerlink" title="7. 下载Scala"></a>7. 下载Scala</h3><p>这里用2.10.7【因为Spark按照的<strong>2.x</strong>所以Scala版本更正为**2.11.x+**】<br><a href="https://downloads.lightbend.com/scala/2.10.7/scala-2.10.7.tgz">https://downloads.lightbend.com/scala/2.10.7/scala-2.10.7.tgz</a></p><h3 id="8-上传解压-1"><a href="#8-上传解压-1" class="headerlink" title="8. 上传解压"></a>8. 上传解压</h3><h3 id="9-配置环境变量-1"><a href="#9-配置环境变量-1" class="headerlink" title="9. 配置环境变量"></a>9. 配置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scala</span></span><br><span class="line">export SCALA_HOME=/usr/local/src/scala-2.10.7</span><br><span class="line">export PATH=$PATH:$SCALA_HOME/bin</span><br><span class="line"></span><br><span class="line">配置生效</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>输入scala<br><img src="http://image-oss-ibean.test.upcdn.net/blog/20181224123856351.png!o" alt="在这里插入图片描述"><br>安装成功</p><h3 id="10-节点分发-1"><a href="#10-节点分发-1" class="headerlink" title="10. 节点分发"></a>10. 节点分发</h3><p>略~</p><h3 id="11-启动spark集群-1"><a href="#11-启动spark集群-1" class="headerlink" title="11. 启动spark集群"></a>11. 启动spark集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/spark-2.0.2/sbin</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><h3 id="11-验证-1"><a href="#11-验证-1" class="headerlink" title="11. 验证"></a>11. 验证</h3><p>查看jps<br><img src="http://image-oss-ibean.test.upcdn.net/blog/20181224124102791.png!o" alt="在这里插入图片描述"><br>浏览器输入ip:8080<br><img src="http://image-oss-ibean.test.upcdn.net/blog/20181224124138647.png!o" alt="在这里插入图片描述"></p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Spark/">Spark</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Spark/">Spark</category>
      
      <category domain="https://blog.ibean.eu.org/tags/Scala/">Scala</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/64906.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>大数据学习各技术参考文档及虚拟机配置</title>
      <link>https://blog.ibean.eu.org/posts/39235.html</link>
      <guid>https://blog.ibean.eu.org/posts/39235.html</guid>
      <pubDate>Thu, 22 Nov 2018 03:31:42 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;环境搭建的文章对于简单的不再更新了，稍微复杂点的再写博客记录吧&lt;/p&gt;
&lt;h3 id=&quot;参考文档地址（持续新增）&quot;&gt;&lt;a href=&quot;#参考文档地址（持续新增）&quot; class=&quot;headerlink&quot; title=&quot;参考文档地址（持续新增）&quot;&gt;&lt;/a&gt;参考文档地址（持续新增</description>
        
      
      
      
      <content:encoded><![CDATA[<p>环境搭建的文章对于简单的不再更新了，稍微复杂点的再写博客记录吧</p><h3 id="参考文档地址（持续新增）"><a href="#参考文档地址（持续新增）" class="headerlink" title="参考文档地址（持续新增）"></a>参考文档地址（持续新增）</h3><table><thead><tr><th>标题</th><th>地址</th></tr></thead><tbody><tr><td>Hadoop Yarn Container 资源分配</td><td><a href="https://blog.csdn.net/szh1124/article/details/76178699?tdsourcetag=s_pcqq_aiomsg">https://blog.csdn.net/szh1124/article/details/76178699?tdsourcetag=s_pcqq_aiomsg</a></td></tr><tr><td>map数量如何控制</td><td><a href="https://www.cnblogs.com/junneyang/p/5850440.html">https://www.cnblogs.com/junneyang/p/5850440.html</a></td></tr><tr><td>MapReduce 程序内部数据处理流程全解析</td><td><a href="http://www.aboutyun.com/thread-15494-1-2.html">http://www.aboutyun.com/thread-15494-1-2.html</a><br><a href="https://blog.csdn.net/qq_17776287/article/details/78176515">https://blog.csdn.net/qq_17776287/article/details/78176515</a><br><a href="https://blog.csdn.net/aa518189/article/details/80020857">https://blog.csdn.net/aa518189/article/details/80020857</a></td></tr><tr><td>maptask 并行度决定机制</td><td><a href="https://blog.csdn.net/tototuzuoquan/article/details/72851603">https://blog.csdn.net/tototuzuoquan/article/details/72851603</a> <br><a href="https://blog.csdn.net/wu_cai/article/details/77869610">https://blog.csdn.net/wu_cai/article/details/77869610</a></td></tr><tr><td>Shuffle过程介绍</td><td><a href="https://blog.csdn.net/txbsw/article/details/80760285">https://blog.csdn.net/txbsw/article/details/80760285</a></td></tr><tr><td>详解 WordCount 运行后历史日志记录</td><td><a href="https://blog.csdn.net/u011414200/article/details/50372331">https://blog.csdn.net/u011414200/article/details/50372331</a></td></tr><tr><td>Hadoop HDFS高可用（HA）</td><td><a href="https://blog.csdn.net/bingduanlbd/article/details/51946540">https://blog.csdn.net/bingduanlbd/article/details/51946540</a></td></tr><tr><td>理解Hadoop YARN架构</td><td><a href="https://blog.csdn.net/bingduanlbd/article/details/51880019">https://blog.csdn.net/bingduanlbd/article/details/51880019</a></td></tr><tr><td>MapReduce shuffle过程剖析及调优</td><td><a href="https://blog.csdn.net/bingduanlbd/article/details/51933914">https://blog.csdn.net/bingduanlbd/article/details/51933914</a></td></tr><tr><td>MapReduce shuffle过程详解</td><td><a href="https://blog.csdn.net/u014374284/article/details/49205885">https://blog.csdn.net/u014374284/article/details/49205885</a></td></tr><tr><td>Hadoop MapReduce原理及实例</td><td><a href="https://blog.csdn.net/bingduanlbd/article/details/51924398">https://blog.csdn.net/bingduanlbd/article/details/51924398</a></td></tr><tr><td>LCS</td><td></td></tr><tr><td>HMM隐马尔科夫</td><td></td></tr><tr><td>协同过滤</td><td></td></tr><tr><td>贝叶斯</td><td><a href="https://baike.baidu.com/tashuo/browse/content?id=bbf9b41cf33c09f9d4856750&lemmaId=&fromLemmaModule=pcBottom">https://baike.baidu.com/tashuo/browse/content?id=bbf9b41cf33c09f9d4856750&amp;lemmaId=&amp;fromLemmaModule=pcBottom</a></td></tr><tr><td>朴素贝叶斯</td><td><a href="https://blog.csdn.net/fisherming/article/details/79509025">https://blog.csdn.net/fisherming/article/details/79509025</a><br><a href="https://blog.csdn.net/li8zi8fa/article/details/76176597">https://blog.csdn.net/li8zi8fa/article/details/76176597</a></td></tr><tr><td>逻辑回归</td><td><a href="https://blog.csdn.net/saltriver/article/details/63681339">https://blog.csdn.net/saltriver/article/details/63681339</a></td></tr><tr><td>逻辑回归——梯度下降法</td><td><a href="https://www.jianshu.com/p/c7e642877b0e">https://www.jianshu.com/p/c7e642877b0e</a></td></tr></tbody></table><hr><h3 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h3><p><strong>虚拟机：</strong> Vmware12</p><hr><p><strong>操作系统：</strong> CentOS7.5</p><hr><p><strong>系统内常用组件：</strong> lrzsz、vim、yum、wget</p><hr><p><strong>主从机地址：</strong><br>Master —&gt; 192.168.202.10<br>Slave1 —&gt; 192.168.202.11<br>Slave2 —&gt; 192.168.202.12</p><hr><p><strong>软件版本（及时更新）</strong><br>Anaconda3 用于切换python2和3版本和管理python所需依赖<br>Maria DB<br>Hadoop2.7.7<br>HBase1.3.1<br>Zookeeper 3.4.11<br>Scala 2.11.12<br>Spark 2.0.2<br>Hive 1.2.2<br>Flume 1.9.0<br>Kafka 2.11-2.1.0</p><hr>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/">大数据</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/%E6%96%87%E6%A1%A3/">文档</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/39235.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>zookeeper3.4.11搭建安装</title>
      <link>https://blog.ibean.eu.org/posts/43181.html</link>
      <guid>https://blog.ibean.eu.org/posts/43181.html</guid>
      <pubDate>Thu, 22 Nov 2018 03:02:03 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;所有涉及到路径的地方均以自己的为准，下面的路径仅供参考&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Master机器确保安装wget&lt;br&gt;将zookeeper3.4.11下载到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;src目录下&lt;br&gt;通过下面的命</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>所有涉及到路径的地方均以自己的为准，下面的路径仅供参考</strong><br><strong>Master机器确保安装wget<br>将zookeeper3.4.11下载到&#x2F;usr&#x2F;local&#x2F;src目录下<br>通过下面的命令安装3.4.11版本的</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.11/zookeeper-3.4.11.tar.gz</span><br></pre></td></tr></table></figure><p><strong>下载完成后解压</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.11.tar.gz</span><br></pre></td></tr></table></figure><p><strong>之后进入zookeeper目录，新建两个目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">mkdir logs</span><br></pre></td></tr></table></figure><p><strong>修改Zookeeper配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd zookeeper-3.4.11/conf/</span><br></pre></td></tr></table></figure><ol><li><p><strong>修改zoo.cfg</strong><br>conf目录下是没有zoo.cfg的，所以需要mv或者cp一份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p><strong>vim zoo.cfg</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/usr/local/src/zookeeper-3.4.11/data</span><br><span class="line">dataLogDir=/usr/local/src/zookeeper-3.4.11/logs</span><br><span class="line">server.1=master:2888:3888</span><br><span class="line">server.2=slave1:2888:3888</span><br><span class="line">server.3=slave2:2888:3888</span><br></pre></td></tr></table></figure></li><li><p><strong>增加环境变量 vim ~&#x2F;.bashrc</strong></p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ZOOKEEPER_HOME=/usr/local/src/zookeeper-3.4.11</span><br><span class="line">PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></pre></td></tr></table></figure><p> **刷新环境变量</p></li></ol><p>&#x3D;&#x3D;source ~&#x2F;.bashrc&#x3D;&#x3D;**<br>3. <strong>复制到从机并配置从机的环境变量</strong></p><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -rp zookeeper-3.4.11 slave1:/usr/local/src/</span><br><span class="line">scp -rp zookeeper-3.4.11 slave2:/usr/local/src/</span><br></pre></td></tr></table></figure></code></pre><ol start="4"><li><p><strong>分别为主从机添加id</strong></p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// master</span><br><span class="line">echo &quot;1&quot; &gt; /usr/local/src/zookeeper-3.4.11/data/myid</span><br><span class="line">// slave1</span><br><span class="line">echo &quot;2&quot; &gt; /usr/local/src/zookeeper-3.4.11/data/myid</span><br><span class="line">// slave2</span><br><span class="line">echo &quot;3&quot; &gt; /usr/local/src/zookeeper-3.4.11/data/myid</span><br></pre></td></tr></table></figure></li><li><p><strong>启动主从机zookeeper</strong><br> 主从机必须启动以后才能查看6步骤的状态</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure><p> <img src="/../img/20181122105804390.png" alt="在这里插入图片描述"></p></li><li><p><strong>查看zookeeper状态</strong></p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh status</span><br></pre></td></tr></table></figure><p> 主从机如图所示为成功，区别仅在mode：xxx<br> <img src="/../img/20181122105821537.png" alt="在这里插入图片描述"></p></li><li><p><strong>jps查看进程状态</strong><br>主从机都有这个进程就可以了<br><img src="/../img/20181122110031198.png" alt="在这里插入图片描述"></p></li><li><p>关闭zookeeper</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh stop</span><br></pre></td></tr></table></figure></li></ol><hr>启动顺序 hadoop->zookeeper->hbase]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Zookeeper/">Zookeeper</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/zookeeper/">zookeeper</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/43181.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hbase 1.3.1 搭建安装</title>
      <link>https://blog.ibean.eu.org/posts/17135.html</link>
      <guid>https://blog.ibean.eu.org/posts/17135.html</guid>
      <pubDate>Thu, 22 Nov 2018 02:24:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;所有涉及到路径的地方均以自己的为准，下面的路径仅供参考&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Master机器确保安装wget&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;将Hbase1.3.1下载到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;src目</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>所有涉及到路径的地方均以自己的为准，下面的路径仅供参考</strong><br><strong>Master机器确保安装wget</strong><br><strong>将Hbase1.3.1下载到&#x2F;usr&#x2F;local&#x2F;src目录下</strong><br><strong>通过下面的命令安装1.3.1版本的</strong></p><h1 id="开始之前先看一下版本的问题，选择对的版本很重要，以下图片来自官网"><a href="#开始之前先看一下版本的问题，选择对的版本很重要，以下图片来自官网" class="headerlink" title="开始之前先看一下版本的问题，选择对的版本很重要，以下图片来自官网"></a>开始之前先看一下版本的问题，选择对的版本很重要，以下图片来自官网</h1><h2 id="JDK版本关系"><a href="#JDK版本关系" class="headerlink" title="JDK版本关系"></a>JDK版本关系</h2><p><img src="/../img/20190125095658789.png" alt="在这里插入图片描述"></p><h2 id="Hadoop的版本关系"><a href="#Hadoop的版本关系" class="headerlink" title="Hadoop的版本关系"></a>Hadoop的版本关系</h2><p><img src="/../img/20190125095731297.png" alt="在这里插入图片描述"></p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://archive.apache.org/dist/hbase/1.3.1/hbase-1.3.1-bin.tar.gz </span><br></pre></td></tr></table></figure><p><strong>下载完成后解压</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf hbase-0.98.24-hadoop1-bin.tar.gz</span><br></pre></td></tr></table></figure><p><strong>修改hbase conf配置</strong></p><pre><code>cd hbase-1.3.1/conf/</code></pre><ol><li><p><strong>vim regionservers</strong></p><p><strong>删除localhost添加以下内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure><p><strong>保存退出</strong></p></li><li><p><strong>vim hbase-env.sh</strong>  </p><p>找到JAVA_HOME的位置，修改成如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=你安装的jdk目录</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib</span></span></span><br></pre></td></tr></table></figure><p>然后找到zk配置将true改为false，使用独立zookeeper否则会使用自带的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure></li><li><p><strong>vim hbase-site.xml</strong></p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hbase安装路径下新建tmp临时目录<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master,slave1,slave2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>zookeeper安装地址<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>增加环境变量 vim ~&#x2F;.bashrc</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export HBASE_HOME=/usr/local/src/hbase-1.3.1</span><br><span class="line">export HBASE_CLASSPATH=$HBASE_HOME/conf</span><br><span class="line">export HBASE_LOG_DIR=$HBASE_HOME/logs</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure><p>**刷新环境变量</p></li></ol><p>&#x3D;&#x3D;source ~&#x2F;.bashrc&#x3D;&#x3D;**</p><pre><code>HBase目录下新建tmp，logs文件夹对应配置文件中的地址&gt; 第五步之前请看一下这边文章的分发之前的部分，配置了高可用，或者可以完全参考这篇文章进行配置，当然这个博主之前已经配置了Hadoop的ha&gt; https://www.cnblogs.com/qingyunzong/p/8668880.html#_label2_6</code></pre><ol start="5"><li><p><strong>复制到从机并配置从机的环境变量</strong> </p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -rp hbase-1.3.1 slave1:/usr/local/src/</span><br><span class="line">scp -rp hbase-1.3.1 slave2:/usr/local/src/</span><br></pre></td></tr></table></figure></li><li><p><strong>安装zookeeper</strong>（<a href="https://blog.csdn.net/github_36887863/article/details/84335536">参考链接</a>）</p></li><li><p><strong>启动集群</strong><br>进到bin目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start-hbase.sh</span><br></pre></td></tr></table></figure><p><strong>上面改了hbase.master.info.port这个，所以页面端口是60010而不是16010</strong></p></li></ol><hr><h1 id="启动顺序-hadoop-gt-zookeeper-gt-hbase"><a href="#启动顺序-hadoop-gt-zookeeper-gt-hbase" class="headerlink" title="启动顺序 hadoop-&gt;zookeeper-&gt;hbase"></a><span style='color:red'>启动顺序 hadoop-&gt;zookeeper-&gt;hbase</span></h1>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Hbase/">Hbase</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Hbase/">Hbase</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/17135.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CentOS7安装MariaDB</title>
      <link>https://blog.ibean.eu.org/posts/11326.html</link>
      <guid>https://blog.ibean.eu.org/posts/11326.html</guid>
      <pubDate>Wed, 21 Nov 2018 08:04:04 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;安装Maria DB&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>安装Maria DB</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mariadb mariadb-server</span><br></pre></td></tr></table></figure><p><strong>启动Maria DB</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure><p><strong>设置开机启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mariadb</span><br></pre></td></tr></table></figure><p><strong>初始化设置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p><strong>运行后会提示</strong></p><pre><code>Enter current password for root (enter for none):   回车确认Set root password? [Y/n] 回车确认New password: 新密码Re-enter new password: 再输一次</code></pre><p><strong>之后的所有选项回车到底完成安装<br>验证是否成功安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><strong>输入刚才的密码回车，显示出下面的就成功了</strong><br><img src="/../img/2018112115562978.png"></p><p><strong>因为在初始化的时候设置了root用户不能远程访问，所以需要设置下远程访问的新用户</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;改成你的用户名&#x27;@&#x27;%&#x27;IDENTIFIED BY &#x27;改成你的密码&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p><strong>然后刷新一下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>用连数据库的工具输入<strong>ip，用户名，和密码</strong>就可以了，如果连不上根据错误百度吧。<br>其中可能的原因是因为<strong>防火墙</strong>，<strong>关掉</strong>或者<strong>设置防火墙的端口</strong><br>这里<strong>以关掉防火墙为例</strong>：<br>如果还在上述界面，exit退出MySQL<br><strong>CentOS7</strong>默认的防火墙组件为<strong>firewalld</strong>所以执行如下命令（这里不讨论<strong>iptables</strong>的问题）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><p>​    </p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/MariaDB/">MariaDB</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/CentOS7/">CentOS7</category>
      
      <category domain="https://blog.ibean.eu.org/tags/MariaDB/">MariaDB</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/11326.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HDFS相关</title>
      <link>https://blog.ibean.eu.org/posts/23300.html</link>
      <guid>https://blog.ibean.eu.org/posts/23300.html</guid>
      <pubDate>Tue, 20 Nov 2018 02:11:04 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;HDFS&quot;&gt;&lt;a href=&quot;#HDFS&quot; class=&quot;headerlink&quot; title=&quot;HDFS&quot;&gt;&lt;/a&gt;HDFS&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;什么是HDFS&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;HDFS是Hadoop中的分布式文件系统，</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h1><ul><li>什么是HDFS</li></ul><blockquote><p>HDFS是Hadoop中的分布式文件系统，用于存储超大数据文件，为Hadoop提供基础存储服务</p></blockquote><ul><li>HDFS有什么特点</li></ul><blockquote><ol><li>HDFS可存储超大文件</li><li>一次写入，多次读取<br> 一个文件经过创建，写入和关闭之后就不需要改变，这个假设简化了数据一致性的问题，提高了数据访问的吞吐量</li><li>物理机设备硬件要求低<br> HDFS设计中充分考虑了数据的可靠性、安全性和高可用性</li></ol></blockquote><ul><li>HDFS的是否有块的概念？这样设计有什么优点</li></ul><blockquote><p>HDFS有Block的概念，其大小Hadoop1.0默认为64M（Hadoop2.0 为128M），相比于磁盘的文件系统大很多；设计的如此之大是为了<br>1.<strong>最小化寻址开销</strong>，因为大的块可以减少寻道时间<br>2.<strong>减少管理块的数据开销</strong>，因为每个Block在namenode上都有记录</p></blockquote><ul><li>为什么说HDFS可以存储超大的文件</li></ul><blockquote><p>HDFS的文件可以大于任何一个磁盘的容量，因为文件的所有块并不需要存储在一个磁盘上，因此可以通过集群中的任意磁盘进行存储，正式因为这种分布式的逻辑使得HDFS存储的数据可以达到G、T、P等级别</p></blockquote><ul><li>哪些场景不适合用HDFS<blockquote><p>1.低延迟，实时查询<br>2.大量<strong>小</strong>文件，由于每个文件都会产生各自的Metadata元数据，而Hadoop通过namenode存储这些数据，若小文件过多，会导致Namenode存储出现瓶颈<br>3.多用户更新<br>4.结构化数据<br>5.数据量并不大</p></blockquote></li></ul>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/HDFS/">HDFS</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Hadoop/">Hadoop</category>
      
      <category domain="https://blog.ibean.eu.org/tags/HDFS/">HDFS</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/23300.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hadoop2.7.7集群搭建安装</title>
      <link>https://blog.ibean.eu.org/posts/17961.html</link>
      <guid>https://blog.ibean.eu.org/posts/17961.html</guid>
      <pubDate>Mon, 19 Nov 2018 01:43:01 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;修改主机名称&quot;&gt;&lt;a href=&quot;#修改主机名称&quot; class=&quot;headerlink&quot; title=&quot;修改主机名称&quot;&gt;&lt;/a&gt;修改主机名称&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;vim /etc/sysconfig/network
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内容</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="修改主机名称"><a href="#修改主机名称" class="headerlink" title="修改主机名称"></a>修改主机名称</h2><pre><code>vim /etc/sysconfig/network</code></pre><p>内容：HOSTNAME&#x3D;master</p><p>分别修改其他主机HOSTNAME</p><h2 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h2><ul><li>vim &#x2F;etc&#x2F;hosts</li><li>写入mater，slave1，slave2，。。。格式为 ip name 如：192.168.202.10 master<br><img src="/../img/20181119091928809.png" alt="在这里插入图片描述"></li><li><code>scp /etc/hosts slave1:/etc/hosts</code> 将文件分别复制到从机中</li></ul><h2 id="主从免密登录"><a href="#主从免密登录" class="headerlink" title="主从免密登录"></a>主从免密登录</h2><ul><li>主节点 通过 ssh-keygen 回车。。。直到生成文件</li><li>cd ~&#x2F;.ssh</li><li>写入文件： <code>cat id_rsa.pub &gt; authorized_keys</code></li><li>从节点 ssh-keygen生成文件</li><li>cd ~&#x2F;.ssh</li><li>cat id_rsa.pub 将显示出的内容复制到主节点的authorized_keys中</li><li>全部复制完毕后，在主节点的.ssh目录下执行**scp authorized_keys slave1:~&#x2F;.ssh&#x2F;**复制到所有从节点中</li><li><strong>验证</strong> ssh slave1直接进入从机说明操作成功</li></ul><h2 id="Hadoop安装（1-0-和2-0-版本上有很多区别）"><a href="#Hadoop安装（1-0-和2-0-版本上有很多区别）" class="headerlink" title="Hadoop安装（1.0+和2.0+版本上有很多区别）"></a>Hadoop安装（1.0+和2.0+版本上有很多区别）</h2><ul><li><p>保证Java环境正常</p></li><li><p><a href="https://hadoop.apache.org/releases.html">Hadoop下载地址</a> 选择稳定发行版，当前选择2.7.7<br><img src="/../img/20181119091949826.png" alt="在这里插入图片描述"></p></li><li><p>下载上传到CentOS中，tar -zxvf xxxx解压</p><h3 id="修改-x2F-hadoop-2-7-7-x2F-etc-x2F-hadoop-x2F-hadoop-env-sh"><a href="#修改-x2F-hadoop-2-7-7-x2F-etc-x2F-hadoop-x2F-hadoop-env-sh" class="headerlink" title="修改&#x2F;hadoop-2.7.7&#x2F;etc&#x2F;hadoop&#x2F;hadoop-env.sh"></a>修改&#x2F;hadoop-2.7.7&#x2F;etc&#x2F;hadoop&#x2F;hadoop-env.sh</h3><p>将其中的JAVA_HOME修改为本机JAVA_HOME路径<br><img src="/../img/20181119092008604.png" alt="在这里插入图片描述"></p><h3 id="修改hadoop-x2F-core-site-xml"><a href="#修改hadoop-x2F-core-site-xml" class="headerlink" title="修改hadoop&#x2F;core-site.xml"></a>修改hadoop&#x2F;core-site.xml</h3><p>hadoop 安装目录mkdir tmp创建临时文件夹</p><pre><code>vim /usr/local/src/hadoop-2.7.7/etc/hadoop/core-site.xml</code></pre></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">              &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">              &lt;value&gt;/usr/local/src/hadoop-2.7.7/tmp&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">              &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">              &lt;value&gt;hdfs://192.168.202.10:9000&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br></pre></td></tr></table></figure><h3 id="修改hadoop-x2F-mapred-site-xml"><a href="#修改hadoop-x2F-mapred-site-xml" class="headerlink" title="修改hadoop&#x2F;mapred-site.xml"></a>修改hadoop&#x2F;mapred-site.xml</h3><p>  如果没有通过cp复制一份template文件并去掉template</p><p>  打开mapred-site.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h3 id="修改hadoop-x2F-hdfs-site-xml"><a href="#修改hadoop-x2F-hdfs-site-xml" class="headerlink" title="修改hadoop&#x2F;hdfs-site.xml"></a>修改hadoop&#x2F;hdfs-site.xml</h3><p>  配置hdfs副本数，默认3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:9001&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;file:/usr/local/src/hadoop-2.7.7/dfs/name&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;file:/usr/local/src/hadoop-2.7.7/dfs/data&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改yarn-site-xml"><a href="#修改yarn-site-xml" class="headerlink" title="修改yarn-site.xml"></a>修改yarn-site.xml</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:8032&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:8030&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:8035&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:8033&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:8088&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h3 id="创建临时目录和文件目录"><a href="#创建临时目录和文件目录" class="headerlink" title="创建临时目录和文件目录"></a>创建临时目录和文件目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/src/hadoop-2.7.7/tmp</span><br><span class="line">mkdir -p /usr/local/src/hadoop-2.7.7/dfs/name</span><br><span class="line">mkdir -p /usr/local/src/hadoop-2.7.7/dfs/data</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre><code>vim ~/.bashrcHADOOP_HOME=/usr/local/src/hadoop-2.7.7export PATH=$PATH:$HADOOP_HOME/bin</code></pre><h3 id="复制hadoop到其他从机"><a href="#复制hadoop到其他从机" class="headerlink" title="复制hadoop到其他从机"></a>复制hadoop到其他从机</h3><p>  <code>scp -rp xxx slave1:/hadoop</code> 存放路径</p><h3 id="禁用CentOS7防火墙"><a href="#禁用CentOS7防火墙" class="headerlink" title="禁用CentOS7防火墙"></a>禁用CentOS7防火墙</h3><p>  <code>systemctl stop firewalld.service</code> 停止防火墙进程</p><p>  <code>systemctl disable firewalld.service</code> 禁止开机启动</p><p>  <strong>关闭selinux</strong>      setenforce 0</p><h3 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h3><p>  第一次启动需要格式化</p><p>  进入bin目录</p><p>  格式化    <code> ./hdfs namenode -format</code></p><p>  进入sbin目录</p><p>  启动       <code>./start-all.sh</code></p><p>  jps查看主从节点</p><p>  主节点<br>  <img src="/../img/20181119092308636.png" alt="在这里插入图片描述"><br>  从节点<br>  <img src="/../img/20181119092327493.png" alt="在这里插入图片描述"></p><h3 id="检验是否成功"><a href="#检验是否成功" class="headerlink" title="检验是否成功"></a>检验是否成功</h3><p>  进入bin目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hadoop fs -put 任意文件 /</span><br></pre></td></tr></table></figure><p><img src="/../img/20181119092911872.png" alt="在这里插入图片描述"><br>  无报错说明上传成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hadoop fs -ls /</span><br></pre></td></tr></table></figure><p><img src="/../img/20181119093034328.png" alt="在这里插入图片描述"><br>  此时应该打印出刚才上传的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hadoop fs -cat /test.txt</span><br></pre></td></tr></table></figure><p>查看文件内容是我们上传的<br><img src="/../img/20181119093130289.png" alt="在这里插入图片描述"></p><p>进入从节点执行查看命令，应该可以看到我们刚才上传的文件</p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Hadoop/">Hadoop</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Hadoop/">Hadoop</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/17961.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux常用操作</title>
      <link>https://blog.ibean.eu.org/posts/15634.html</link>
      <guid>https://blog.ibean.eu.org/posts/15634.html</guid>
      <pubDate>Mon, 19 Nov 2018 01:17:10 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Linux常用操作&quot;&gt;&lt;a href=&quot;#Linux常用操作&quot; class=&quot;headerlink&quot; title=&quot;Linux常用操作&quot;&gt;&lt;/a&gt;Linux常用操作&lt;/h1&gt;&lt;h2 id=&quot;Vi-Vim-命令模式执行&quot;&gt;&lt;a href=&quot;#Vi-Vim-命令模式执</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="Vi-Vim-命令模式执行"><a href="#Vi-Vim-命令模式执行" class="headerlink" title="Vi(Vim) 命令模式执行"></a>Vi(Vim) 命令模式执行</h2><p><strong>复制&#x2F;粘贴&#x2F;截切</strong></p><ul><li>复制：<code>yy（当前行），nyy（n行），ny（n+1行）</code></li><li>剪切：<code>dd（当前行），ndd（n行），nd（n+1行）</code></li><li>粘贴：<code>p</code></li><li>取消高亮：   <code>:noh</code>   或者 <code>/sldfjsdlfj</code> 随便输入</li></ul><blockquote><p>这里仅作为随手笔记记录常用到的，欢迎大佬补充</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Linux/">Linux</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Linux/">Linux</category>
      
      <category domain="https://blog.ibean.eu.org/tags/Vim/">Vim</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/15634.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>扩展layui_icon图标库为阿里图标库或Font-Awesome</title>
      <link>https://blog.ibean.eu.org/posts/3231.html</link>
      <guid>https://blog.ibean.eu.org/posts/3231.html</guid>
      <pubDate>Mon, 22 Oct 2018 02:37:08 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;鉴于Layui 140个图标可能不太够用，所以这里我们需要扩展下&lt;br&gt;分别试了 &lt;a href=&quot;http://www.fontawesome.com.cn/&quot;&gt;Font Awesome&lt;/a&gt;  和 &lt;a href=&quot;http://www.iconfont.cn/&quot;&gt;阿</description>
        
      
      
      
      <content:encoded><![CDATA[<p>鉴于Layui 140个图标可能不太够用，所以这里我们需要扩展下<br>分别试了 <a href="http://www.fontawesome.com.cn/">Font Awesome</a>  和 <a href="http://www.iconfont.cn/">阿里的IconFont</a> ，其他图标库应该是通用的</p><p>首先Font Awesome 这里用的4.7，5.0+emmm是要买授权了嘛。。。不知道，阿里库就挺好的挺丰富反正<br>需要先引入font-face（扩展其他库也要这样）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: &#x27;FontAwesome&#x27;;</span><br><span class="line">    src: url(&#x27;/assets/fonts/fontawesome-webfont.eot?v=4.7.0&#x27;);</span><br><span class="line">    src: url(&#x27;/assets/fonts/fontawesome-webfont.eot?#iefix&amp;v=4.7.0&#x27;) format(&#x27;embedded-opentype&#x27;), </span><br><span class="line">    url(&#x27;/assets/fonts/fontawesome-webfont.woff2?v=4.7.0&#x27;) format(&#x27;woff2&#x27;), </span><br><span class="line">    url(&#x27;/assets/fonts/fontawesome-webfont.woff?v=4.7.0&#x27;) format(&#x27;woff&#x27;),</span><br><span class="line">    url(&#x27;/assets/fonts/fontawesome-webfont.ttf?v=4.7.0&#x27;) format(&#x27;truetype&#x27;), </span><br><span class="line">    url(&#x27;/assets/fonts/fontawesome-webfont.svg?v=4.7.0#fontawesomeregular&#x27;) format(&#x27;svg&#x27;);</span><br><span class="line">    font-weight: normal;</span><br><span class="line">    font-style: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着覆写layui-icon这个类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.layui-icon &#123;</span><br><span class="line">    font-family: layui-icon, FontAwesome!important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后起名字，layui-icon-fa这样用于区分layui的icon，后缀用font awesome的名字，因为使用fontclass的形式，所以后面的Unicode是我们需要的<br><img src="/../img/20181022103219780!o.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.layui-icon-fa-bandcamp:before&#123;</span><br><span class="line">    content: &#x27;\f2d5&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候和layui icon的使用方法一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;layui-icon layui-icon-fa-bandcamp&quot; style=&quot;font-size: 30px; color: red;&quot;&gt;&lt;/i&gt; Font Awesome</span><br></pre></td></tr></table></figure><p>关于阿里的图标库使用就更简单了，完全不需要上述这么繁琐</p><ol><li>首先注册用户登录；</li><li>图标管理里创建项目；创建项目的时候，可以这样设置，这样子前缀就和layui统一了，至于下面的Font Family改不改都行，如果更改那覆写样式的时候要改成与之对应的</li></ol><p><img src="/../img/20181022103311689!o.png" alt="在这里插入图片描述"></p><ol start="3"><li><p>添加喜欢的图标到项目里；</p></li><li><p>生成在线链接；选中fontclass；复制下方的代码，在页面内引入<br><img src="/../img/20181022103323927!o.png" alt="在这里插入图片描述"></p></li><li><p>覆写layui-icon这个类</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.layui-icon &#123;</span><br><span class="line">    font-family: layui-icon, iconfont !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>使用啦，在4步骤的那个页面种，Font Class下有对应图标的class名直接复制使用即可</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;layui-icon layui-icon-ali-add&quot; style=&quot;font-size: 30px; color: black;&quot;&gt;&lt;/i&gt; Ali IconFont</span><br></pre></td></tr></table></figure><p><strong>最后效果图：</strong><br>分别是Font Awesome、Layui Icon、阿里库（同Font Awesome方式引入）、阿里库（上述描述方式）<br><img src="/../img/20181022103351547!o.png" alt="在这里插入图片描述"></p><blockquote><p><a href="https://fly.layui.com/jie/42581/">https://fly.layui.com/jie/42581/</a> layui社区帖子地址</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/layui/">layui</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/layui/">layui</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/3231.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>解决设置X-Frame-Options后Response有多个值</title>
      <link>https://blog.ibean.eu.org/posts/35538.html</link>
      <guid>https://blog.ibean.eu.org/posts/35538.html</guid>
      <pubDate>Tue, 16 Oct 2018 02:46:28 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;@&lt;a href=&quot;%E8%A7%A3%E5%86%B3%E8%AE%BE%E7%BD%AEX-Frame-Options%E5%90%8EResponse%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%80%BC&quot;&gt;TOC&lt;/a&gt;&lt;br&gt;起因：最近在做前后端</description>
        
      
      
      
      <content:encoded><![CDATA[<p>@<a href="%E8%A7%A3%E5%86%B3%E8%AE%BE%E7%BD%AEX-Frame-Options%E5%90%8EResponse%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%80%BC">TOC</a><br>起因：最近在做前后端分离的项目，项目中需要把swagger嵌套进来，用了iframe但是却提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Refused to display &#x27;http://xxxxxxxxxxxxx&#x27; in a frame because it set &#x27;X-Frame-Options&#x27; to &#x27;deny&#x27;.</span><br></pre></td></tr></table></figure><p>首先当然是百度，结果是在nginx的<strong>http&#x2F;server&#x2F;location</strong>下设置<strong>add_header X-Frame-Options SAMEORIGIN always;</strong> 这个就可以解决问题（PS：我只在location下设置后才生效），当然遵从百度，nginx设置后重启，刷新页面此时报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Refused to display &#x27;http://xxxxxxxxxxxxxxxx&#x27; in a frame because it set multiple &#x27;X-Frame-Options&#x27; headers with conflicting values (&#x27;DENY, SAMEORIGIN&#x27;). Falling back to &#x27;deny&#x27;.</span><br></pre></td></tr></table></figure><p>X-Frame-Options被设置了多个值，查看Response，发现果然返回了多个值，继续百度。。。。。ing<br><img src="/../img/20181016104224706!o.png" alt="在这里插入图片描述"><br>结果是百度根本没有这个解决的方案，清一色的统一回答，无奈谷歌全英搜索（搜出来的会是外国的帖子)，几经寻找以后发现了一个帖子<br>帖子中给了一个参数<strong>proxy_hide_header X-Frame-Options;</strong> 隐藏这个header，重新修改nginx配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /xxx &#123;</span><br><span class="line">proxy_hide_header X-Frame-Options;</span><br><span class="line">add_header X-Frame-Options SAMEORIGIN always;</span><br><span class="line">proxy_pass  http://xxxxxxxxxx/swagger-ui.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个样子，然后重启，刷新页面，Response中只有SAMEORIGIN这个了，Deny被干掉。<br>ok问题解决。</p>]]></content:encoded>
      
      
      
      <category domain="https://blog.ibean.eu.org/tags/Spring/">Spring</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/35538.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mybatis动态SQL执行批量更新注意事项</title>
      <link>https://blog.ibean.eu.org/posts/11198.html</link>
      <guid>https://blog.ibean.eu.org/posts/11198.html</guid>
      <pubDate>Thu, 23 Aug 2018 07:37:26 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateSingleCj&quot; parameterType=&quot;java.util.List&quot;&gt;</span><br><span class="line">       &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; separator=&quot;;&quot;&gt;</span><br><span class="line">           UPDATE sychengji</span><br><span class="line">           &lt;set&gt;</span><br><span class="line">               略</span><br><span class="line">           &lt;/set&gt;</span><br><span class="line">           WHERE ***</span><br><span class="line">       &lt;/foreach&gt;</span><br><span class="line">   &lt;/update&gt;</span><br></pre></td></tr></table></figure><p><strong>出现问题：项目执行后SQL语句正常，放入数据库中批量更新生效，却在项目中报错</strong></p><hr><p>看了半天百度了半天终于找到解决方式，解决方式如下：</p><p>其中<strong>allowMultiQueries&#x3D;true</strong>在地址后面加上这个解决了update无法批量更新的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://localhost:8080/test？useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true</span><br></pre></td></tr></table></figure><p>如果发现相同博文。。。都是我。。。只不过另一个号被封了 </p>]]></content:encoded>
      
      
      <category domain="https://blog.ibean.eu.org/categories/Mybatis/">Mybatis</category>
      
      
      <category domain="https://blog.ibean.eu.org/tags/Mybatis/">Mybatis</category>
      
      
      <comments>https://blog.ibean.eu.org/posts/11198.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
